<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="武器/dominator/dominator" itemID="65df52bb-00000453" linkageExportForAS="true" linkageIdentifier="枪-手枪-dominator" lastModified="1752343256" lastUniqueIdentifier="4">
  <timeline>
    <DOMTimeline name="dominator">
      <layers>
        <DOMLayer name="图层 2" color="#9933CC" current="true" isSelected="true">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="各种图素材等/dominator素材" selected="true" centerPoint3DX="17.8" centerPoint3DY="-6.6">
                  <matrix>
                    <Matrix a="1.15042114257813" d="1.15042114257813" tx="-40.85" ty="-43.4"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="45.8" y="30.9"/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 自机 = _root.获得父节点(this, 5);
	var 自机类型 = _root.获得父节点(this, 2)._name;
	var 时间戳名 = 自机.手枪 + "时间戳";
	var 动画帧名 = 自机.手枪 + "动画帧";
	var 变形计数 = 自机.手枪 + "变形计数";
	var 武器类型名 = "武器类型:" + 自机.手枪;
	var 基础属性名 = "基础属性:" + 自机.手枪;
	var 击杀模式动画帧上限 = 50;
	var 击杀模式弹容倍率 = 0.6;
	var 分解模式动画帧上限 = 95;
	var 分解模式弹容倍率 = 0.06;
	自机.变形手枪 = this;
	this.切换为麻醉模式 = function(type)
	{
		if (自机.手枪 == "dominator")
		{
			自机[武器类型名] = "麻醉模式";
			自机.手枪属性数组[14][14] = 自机[基础属性名].基础击倒力;
			//自机.手枪属性数组[14][13] = 自机[基础属性名].基础伤害;
			自机.buff.基础值.手枪威力 = 自机.裸装手枪威力 * 1 + 自机.装备枪械威力加成;
			自机.buff.更新("手枪威力");
			/*if(自机.被动技能.枪械师 && 自机.被动技能.枪械师.启用 && 自机.被动技能.枪械师.等级){
				自机.手枪属性数组[14][13] += 自机.被动技能.枪械师.等级 * 5 * (1-1);
			}*/
			自机.手枪属性数组[14][10] = 自机[基础属性名].基础命中效果;
			自机.手枪属性数组[14][9] = 自机[基础属性名].基础枪口焰;
			自机.手枪属性数组[14][8] = 自机[基础属性名].基础音效;
			自机.手枪属性数组[14][7] = 自机[基础属性名].基础子弹;
			自机.手枪属性数组[14][6] = 自机[基础属性名].基础速度;
			自机.手枪属性数组[14][5] = 自机[基础属性名].基础射击间隔;
			自机.手枪属性数组[14][2] = 自机[基础属性名].基础散射度;
			自机.手枪属性数组[14][1] = 自机[基础属性名].基础霰弹值;
			自机.手枪属性数组[14][0] = 自机[基础属性名].基础弹容;
			自机.手枪弹匣容量 = 自机.手枪属性数组[14][0];
			if(type!="进图读取"){
				自机.手枪射击次数[自机.手枪] = Math.ceil(自机.手枪射击次数[自机.手枪] / 分解模式弹容倍率);
			}
			自机.man.初始化手枪射击函数();
		}
	};
	this.切换为击杀模式 = function(type)
	{
		if (自机.手枪 == "dominator")
		{
			自机[武器类型名] = "击杀模式";
			自机.手枪属性数组[14][14] = 15;
			自机.buff.基础值.手枪威力 = 自机.裸装手枪威力 * 7 + 自机.装备枪械威力加成;
			自机.buff.更新("手枪威力");
			if(自机.被动技能.枪械师 && 自机.被动技能.枪械师.启用 && 自机.被动技能.枪械师.等级){
				自机.手枪属性数组[14][13] += 自机.被动技能.枪械师.等级 * 5 * 7;
			}
			自机.手枪属性数组[14][10] = "火花";
			自机.手枪属性数组[14][9] = "枪火";
			自机.手枪属性数组[14][8] = "dominator枪声2.wav";
			自机.手枪属性数组[14][7] = "普通微波子弹";
			自机.手枪属性数组[14][6] = 自机[基础属性名].基础速度 * 1.2;
			自机.手枪属性数组[14][5] = 自机[基础属性名].基础射击间隔;
			自机.手枪属性数组[14][2] = Math.floor(自机[基础属性名].基础散射度 / 1.5);
			自机.手枪属性数组[14][1] = 自机[基础属性名].基础霰弹值;
			自机.手枪属性数组[14][0] = Math.floor(自机[基础属性名].基础弹容 * 击杀模式弹容倍率);
			自机.手枪弹匣容量 = 自机.手枪属性数组[14][0];
			if(type!="进图读取"){
				自机.手枪射击次数[自机.手枪] = Math.ceil(自机.手枪射击次数[自机.手枪] * 击杀模式弹容倍率);
			}
			自机.man.初始化手枪射击函数();
		}
	};
	this.切换为分解模式 = function(type)
	{
		if (自机.手枪 == "dominator")
		{
			自机[武器类型名] = "分解模式";
			自机.手枪属性数组[14][14] = 0.5;
			自机.buff.基础值.手枪威力 = 自机.裸装手枪威力 * 28 + 自机.装备枪械威力加成;
			自机.buff.更新("手枪威力");
			if(自机.被动技能.枪械师 && 自机.被动技能.枪械师.启用 && 自机.被动技能.枪械师.等级){
				自机.手枪属性数组[14][13] += 自机.被动技能.枪械师.等级 * 5 * 10;
			}
			自机.手枪属性数组[14][10] = "火花";
			自机.手枪属性数组[14][9] = "枪火";
			自机.手枪属性数组[14][8] = "dominator枪声2.wav";
			自机.手枪属性数组[14][7] = "电浆球";
			自机.手枪属性数组[14][6] = 自机[基础属性名].基础速度 * 1.2;
			自机.手枪属性数组[14][5] = Math.floor(自机[基础属性名].基础射击间隔 * 1.5);
			自机.手枪属性数组[14][2] = 0;
			自机.手枪属性数组[14][1] = 自机[基础属性名].基础霰弹值;
			自机.手枪属性数组[14][0] = Math.floor(自机[基础属性名].基础弹容 * 分解模式弹容倍率);
			自机.手枪弹匣容量 = 自机.手枪属性数组[14][0];
			if(type!="进图读取"){
				自机.手枪射击次数[自机.手枪] =  Math.ceil(自机.手枪射击次数[自机.手枪] * 分解模式弹容倍率);
			}
			自机.man.初始化手枪射击函数();
		}
	};
	this.保存武装类型 = function()
	{
		if (_root.控制目标 == 自机._name)
		{
			_root[武器类型名] = 自机[武器类型名];//_root.发布调试消息(_root[武器类型名] + " " + 自机[武器类型名]);
		}
	};

	this.读取武装类型 = function()
	{
		if (_root.控制目标 == 自机._name and _root[武器类型名] == "击杀模式")
		{
			this.切换为击杀模式("进图读取");
			//自机.手枪射击次数 = 自机[基础属性名].基础弹容 - Math.floor((自机[基础属性名].基础弹容 * 击杀模式弹容倍率 - 自机.手枪射击次数) / 击杀模式弹容倍率);//保证切换场景后子弹数量正常
			改变武器类型许可 = true;
			自机[动画帧名] = 击杀模式动画帧上限;
			改变武器类型计数 = 0;
			//_root.发布调试消息(_root[武器类型名] + " " + 自机[武器类型名]);
		}
		if (_root.控制目标 == 自机._name and _root[武器类型名] == "分解模式")
		{
			this.切换为分解模式("进图读取");
			//自机.手枪射击次数 = 自机[基础属性名].基础弹容 - Math.floor((自机[基础属性名].基础弹容 * 分解模式弹容倍率 - 自机.手枪射击次数) / 分解模式弹容倍率);//保证切换场景后子弹数量正常
			改变武器类型许可 = true;
			自机[动画帧名] = 分解模式动画帧上限;
			改变武器类型计数 = 0;
			//_root.发布调试消息(_root[武器类型名] + " " + 自机[武器类型名]);
		}
	};
	//_root.调试模式 = true;
	if (自机[基础属性名] == undefined)
	{//初始化吉他数据
		自机[基础属性名] = {};
		自机[基础属性名].基础击倒力 = 自机.手枪属性数组[14][14];
		自机[基础属性名].基础伤害 = 自机.手枪属性数组[14][13];
		自机[基础属性名].基础buff基础威力 = 自机.buff.基础值.手枪威力;
		自机[基础属性名].基础命中效果 = 自机.手枪属性数组[14][10];
		自机[基础属性名].基础枪口焰 = 自机.手枪属性数组[14][9];
		自机[基础属性名].基础音效 = 自机.手枪属性数组[14][8];
		自机[基础属性名].基础子弹 = 自机.手枪属性数组[14][7];
		自机[基础属性名].基础速度 = 自机.手枪属性数组[14][6];
		自机[基础属性名].基础射击间隔 = 自机.手枪属性数组[14][5];
		自机[基础属性名].基础散射度 = 自机.手枪属性数组[14][2];
		自机[基础属性名].基础霰弹值 = 自机.手枪属性数组[14][1];
		自机[基础属性名].基础弹容 = 自机.手枪属性数组[14][0];

		自机[武器类型名] = "麻醉模式";
		this.读取武装类型();
	}
	if(自机.手枪属性数组[14][7] == 自机[基础属性名].基础子弹 and 自机[武器类型名] != "麻醉模式"){
		this.读取武装类型();
	}
	this.获得动画时长 = function()
	{
		return (自机[武器类型名] == "麻醉模式" ? 1 : (自机[武器类型名] == "分解模式" ? 分解模式动画帧上限 : 击杀模式动画帧上限));
	};
	var 动画时长 = this.获得动画时长();
	var 改变武器类型动画时长 = 5;
	var 刀形态角度偏移 = 90;
	var 刀形态x偏移 = 380;
	var 刀形态y偏移 = -180;
	var 改变武器类型许可 = true;
	var 改变武器类型计数 = -1;
	var 变形时间间隔 = 1 * 1000;

	this.切换武器形态 = function()
	{
		(自机[武器类型名] == "分解模式") ? this.切换为麻醉模式() : ((自机[武器类型名] == "击杀模式") ? this.切换为分解模式("变形") : this.切换为击杀模式("变形"));
		_root.控制目标 == 自机._name ? _root.玩家必要信息界面.子弹数 = 自机.手枪属性数组[14][0] - 自机.手枪射击次数[自机.手枪] : 0;//自机控制时刷新显示
		if (自机.手枪射击ing == true)
		{
			//自机.攻击模式切换("手枪");
		}
	};
	this.切换武器形态为当前模式 = function()
	{
		if(自机[武器类型名] == "分解模式"){
			this.切换为分解模式("进图读取");
		}else if(自机[武器类型名] == "击杀模式"){
			this.切换为击杀模式("进图读取");
		}else if(自机[武器类型名] == "麻醉模式"){
			this.切换为麻醉模式("进图读取");
		}
		_root.控制目标 == 自机._name ? _root.玩家必要信息界面.子弹数 = 自机.手枪属性数组[14][0] - 自机.手枪射击次数[自机.手枪] : 0;//自机控制时刷新显示
	};
	this.判断是否展开 = function()
	{
		return 自机.攻击模式 == "手枪" and 自机[武器类型名] != "麻醉模式";
	};
	this.展开动画 = function()
	{
		//_root.发布调试消息(自机[武器类型名] + this.获得动画时长());
		if (自机[动画帧名] < this.获得动画时长())
		{
			if(自机[动画帧名] == 2){
				改变武器类型许可 = true;
			}
			自机[动画帧名] += 1;
		}else{
			改变武器类型许可 = true;
		}
	};
	this.折叠动画 = function()
	{
		if (自机[动画帧名] > 1)
		{
			自机[动画帧名] -= 1;
		}else{
			改变武器类型许可 = true;
		}
	};


	if (自机[动画帧名] == undefined)
	{
		自机[动画帧名] = 1;
	}
	gotoAndStop(自机[动画帧名]);
	this.onEnterFrame = function()
	{
		自机类型 = _root.获得父节点(this, 2)._name;
		//_root.发布调试消息(1+自机类型+1);
		//_root.发布调试消息("是否有刀" + (自机.刀 == 自机.手枪) + " 是否用刀 " + (自机.攻击模式 == "兵器" or _root.兵器使用检测(自机)) + " 是否持械 " + (自机.攻击模式 == "兵器") + " 是否砍人 " + _root.兵器使用检测(自机));
		//_root.发布调试消息(自机.攻击模式 + _root.兵器使用检测(自机));
		//_root.发布调试消息(自机.攻击模式 + " 枪 动画许可:" + 枪形态动画许可 + " 刀 动画许可:" + 刀形态动画许可 + 自机类型 + " 可见:" + this._visible);  
		if (Key.isDown(_root.武器变形键) and (自机[武器类型名] == "麻醉模式" or 自机[武器类型名] == "击杀模式" or 自机[武器类型名] == "分解模式") and 改变武器类型许可 and 自机.攻击模式 == "手枪" and 自机类型 == "枪")
		{
			if (自机[动画帧名] == 击杀模式动画帧上限 or 自机[动画帧名] == 分解模式动画帧上限 or 自机[动画帧名] <= 3)
			{
				if(自机[动画帧名]!=3){
					改变武器类型许可 = false;
				}
				if (自机[武器类型名] == "击杀模式")
				{
					自机[动画帧名] = 击杀模式动画帧上限;
				}
				else if (自机[武器类型名] == "分解模式")
				{
					自机[动画帧名] = 分解模式动画帧上限;
				}
				else if (自机[武器类型名] == "麻醉模式")
				{
					自机[动画帧名] = 1;
				}
				改变武器类型计数 = 0;
				this.切换武器形态();
				_root.发布消息("dominator切换为[" + 自机[武器类型名] + "]");
				this.保存武装类型();
			}

		}
		this[this.判断是否展开() ? '展开动画' : '折叠动画']();
		gotoAndStop(自机[动画帧名]);
		if(自机[动画帧名]== 1 and 自机[武器类型名] != "麻醉模式"){
			this.切换为麻醉模式()
		}/*else if(自机[动画帧名]== 击杀模式动画帧上限 and 自机[武器类型名] != "击杀模式"){
			this.切换为击杀模式()
		}else if(自机[动画帧名]== 分解模式动画帧上限 and 自机[武器类型名] != "分解模式"){
			this.切换为分解模式()
		}*/
	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 1" color="#F86F8C" locked="true" outline="true" useOutlineView="true">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="武器/dominator/素材/0.area" name="枪口位置" centerPoint3DX="120.15" centerPoint3DY="-17.7">
                  <matrix>
                    <Matrix a="0.560348510742188" d="0.462448120117188" tx="108.95" ty="-26.95"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="20" y="20"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>