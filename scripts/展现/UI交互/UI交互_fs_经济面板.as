import org.flashNight.aven.Proxy.Proxy;

// 初始化 UI 系统参数
_root.UI系统.经济面板动效 = true; // 是否启用经济面板动画效果
_root.UI系统.经济面板帧间隔 = 60; // 动画总帧数
_root.UI系统.经济面板动效占比 = 0.2; // 动画中用于渐显和渐隐的帧数比例

// 定义刷新函数：用于刷新“金钱”面板
_root.UI系统.金钱刷新 = function(newValue:Number, oldValue:Number):Void { 
    // 调用经济面板刷新函数，传入金币图标和对应的变量名
    _root.UI系统.经济面板刷新(_root.金币图标, "金钱");
};

// 定义刷新函数：用于刷新“虚拟币”面板
_root.UI系统.虚拟币刷新 = function(newValue:Number, oldValue:Number):Void { 
    // 调用经济面板刷新函数，传入虚拟币图标和对应的变量名
    _root.UI系统.经济面板刷新(_root.K点图标, "虚拟币");
};

/*

// 设置金钱和虚拟币的监视器
// 使用 Proxy 类添加属性 Setter 监视器，监视“金钱”和“虚拟币”变量的变化
Proxy.addPropertySetterWatcher(_root, "金钱", _root.UI系统.金钱刷新);
Proxy.addPropertySetterWatcher(_root, "虚拟币", _root.UI系统.虚拟币刷新);

*/

// 辅助函数：设置变量监视器
// 用于监视指定变量的变化，并在变化时调用对应的刷新函数，同时增加NaN防护
_root.UI系统.设置变量监视 = function(变量名:String, 刷新函数:Function):Void {
    _root.watch(变量名, function(prop:String, oldValue, newValue):Number {
        // 类型检查：确保旧值是数值类型且新值是数值类型
        if (typeof oldValue === "number" && typeof newValue === "number") {
            // 当旧值有效（非NaN）且新值无效（NaN）时，回退旧值
            if (!isNaN(oldValue) && isNaN(newValue)) {
                newValue = oldValue; // 回退到修改前的有效值
            }
        }

        // 检查旧值是否已定义且与新值不同（使用全等判断）
        if (oldValue !== undefined && oldValue !== newValue) {
            刷新函数(); // 调用刷新函数
        }

        return newValue; // 返回最终确定的新值
    });
};


// 设置金钱和虚拟币的监视器，由于目前需求较为简单，直接使用性能开销更低的watch
// 监视“金钱”变量的变化，当变化时调用金钱刷新函数
_root.UI系统.设置变量监视("金钱", _root.UI系统.金钱刷新);
// 监视“虚拟币”变量的变化，当变化时调用虚拟币刷新函数
_root.UI系统.设置变量监视("虚拟币", _root.UI系统.虚拟币刷新);


// 初始化面板函数
// 用于初始化指定的面板（金币或虚拟币）并开始播放动画
_root.UI系统.初始化面板 = function(面板, 变量, 货币) {
    // 将显示值和上次记录设置为初始值（例如 0），以触发动画
    面板.上次记录 = 0; // 初始记录值，动画起始点
    面板.上次动画值 = 0; // 初始动画值，动画起始点
    面板.显示值 = 0; // 初始显示值，动画起始点
    面板.变动值 = ""; // 变动值，初始为空
    面板.目标值 = 货币; // 目标值为当前货币值，动画结束点
    面板.帧间隔 = _root.UI系统.经济面板帧间隔; // 动画总帧数
    面板.动效帧 = Math.round(_root.UI系统.经济面板帧间隔 * _root.UI系统.经济面板动效占比); // 用于渐显和渐隐的帧数
    面板.结束帧 = _root.UI系统.经济面板帧间隔 - 面板.动效帧; // 动画渐隐开始的帧数
    面板.动画帧计数器 = 0; // 动画当前帧计数器
    面板.变动框._alpha = 0; // 变动框初始透明度
    面板.动画活跃 = true; // 激活动画
    面板.已初始化 = true; // 标记面板已初始化
    
    // 发布服务器消息，记录当前货币值
    _root.服务器.发布服务器消息(变量 + " : " + 货币);
    
    // 分配 onEnterFrame 函数以处理动画
    // 每一帧都会调用处理动画的函数，更新面板显示
    面板.onEnterFrame = function() {
        _root.UI系统.处理动画(this, 货币);
    };
};

// 封装动画逻辑的函数
// 负责处理面板的动画效果，包括透明度变化和显示值更新
_root.UI系统.处理动画 = function(面板, 货币) {
    面板.动画帧计数器++; // 增加当前帧计数器
    var 变动框透明度 = 100; // 变动框初始透明度
    
    // 计算变动框的透明度
    if (面板.动画帧计数器 <= 面板.动效帧) {
        // 动画开始阶段，变动框逐渐显现
        变动框透明度 = (面板.动画帧计数器 / 面板.动效帧) * 100;
    } else if (面板.动画帧计数器 >= 面板.结束帧) {
        // 动画结束阶段，变动框逐渐消失
        变动框透明度 = ((面板.帧间隔 - 面板.动画帧计数器) / 面板.动效帧) * 100;
    }

    // 限制透明度在0到100之间，避免超出范围
    变动框透明度 = Math.max(0, Math.min(100, 变动框透明度));
    面板.变动框._alpha = 变动框透明度; // 设置变动框的透明度
    
    if (面板.动画帧计数器 < 面板.帧间隔) {
        // 动画过程中，更新显示值，使其平滑过渡到目标值
        var 改变量 = 面板.目标值 - 面板.上次记录; // 计算变化量
        var 当前显示值 = 面板.上次记录 + (改变量 * (面板.动画帧计数器 / 面板.帧间隔)); // 计算当前显示值
        面板.显示值 = Math.round(当前显示值); // 四舍五入显示值
    } else {
        // 动画结束时，确保显示值准确无误
        面板.显示值 = 面板.目标值; // 设置显示值为目标值
        面板.变动值 = ""; // 清空变动值
        面板.动画活跃 = false; // 标记动画已结束
        // 动画完成后移除 onEnterFrame 函数，停止动画更新
        delete 面板.onEnterFrame;
    }
};

// 定义经济面板刷新函数
// 用于刷新指定的经济面板（金币或虚拟币），根据当前货币值决定是否播放动画
_root.UI系统.经济面板刷新 = function(面板, 变量) {
    var 货币 = _root[变量]; // 获取当前货币值
    
    // 检查面板是否已初始化
    if (!面板.已初始化) {
        if (!面板) {
            return true;  // 如果面板不存在，告知外部监听器已经初始化，可以卸载监听
        } else {
            // 初始化面板，并传入当前货币值以触发动画
            _root.UI系统.初始化面板(面板, 变量, 货币);
            return false; // 返回false表示尚未完成初始化
        }
    }
    
    // 检查当前显示值是否与货币值不同，且动画功能开启，且货币值为非负
    if (面板.显示值 != 货币 && _root.UI系统.经济面板动效 && 货币 >= 0) {
        // 检查是否需要激活动画
        if (!面板.动画活跃 || 面板.目标值 != 货币) {
            面板.动画帧计数器 = 0; // 重置动画帧计数器
            面板.上次记录 = Number(面板.显示值) || 0; // 设置上次记录值，确保为数字
            
            if (面板.动画活跃) {
                // 如果动画已活跃，计算变动值为当前货币值与上次动画值的差
                面板.变动值 = 货币 - 面板.上次动画值;
            } else {
                // 如果动画未活跃，计算变动值为当前货币值与上次记录值的差
                面板.变动值 = 货币 - 面板.上次记录;
                面板.上次动画值 = 面板.上次记录; // 更新上次动画值为上次记录值
            }
    
            if (面板.变动值 > 0) {
                // 如果变动值为正数，前面添加加号
                面板.变动值 = "+" + 面板.变动值;
            }
    
            面板.目标值 = 货币; // 设置目标值为当前货币值
            面板.动画活跃 = true; // 激活动画
    
            // 分配 onEnterFrame 函数以处理动画
            // 每一帧都会调用处理动画的函数，更新面板显示
            面板.onEnterFrame = function() {
                _root.UI系统.处理动画(this, 货币);
            };
        }
    } else {
        // 如果显示值与货币值相同，或动画功能关闭，或货币值为负，直接更新显示值
        面板.显示值 = 货币;  // 直接更新显示值，无动画
    }
    
    return false; // 返回false表示刷新完成
};

// 初始刷新，确保面板已初始化并播放动画
// 监听面板是否初始化
_root.帧计时器.eventBus.subscribe("SceneChanged", function() {
    _root.UI系统.金钱刷新(); // 刷新金钱面板，触发初始动画
    _root.UI系统.虚拟币刷新(); // 刷新虚拟币面板，触发初始动画
}, null);