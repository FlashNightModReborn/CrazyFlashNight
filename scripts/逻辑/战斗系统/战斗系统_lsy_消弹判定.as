/**
 * 消除子弹系统 - 高性能子弹碰撞检测与消除
 * 
 * 功能说明：
 * • 检测并消除满足条件的敌我子弹，实现消弹技能效果
 * • 基于Z轴坐标、敌我属性、移动方向进行多层过滤
 * • 使用位掩码优化近战子弹类型检测性能
 * 
 * 性能优化要点：
 * • 宏展开机制：编译时注入FLAG常量，零运行时索引开销
 * • 位掩码技术：单次位运算替代多次字符串匹配
 * • 早期退出：多级条件筛选，减少不必要的碰撞检测
 * 
 * @param obj:Object 消弹属性对象，包含：
 *   - shootZ: 消弹者Z轴坐标
 *   - 消弹敌我属性: 消弹者的敌我属性标识
 *   - 消弹方向: 消弹方向限制（可选）
 *   - Z轴攻击范围: Z轴有效攻击范围
 *   - 区域定位area: 消弹区域碰撞检测对象
 */
_root.消除子弹 = function(obj)
{
	// 暂停状态检查 - 游戏暂停时停止所有消弹逻辑
	if (_root.暂停)
	{
		return;
	}
	
	// 提取消弹参数 - 缓存对象属性访问，提升性能
	var 消弹敌我属性 = obj.消弹敌我属性;  // 消弹者的敌我属性（true=敌人，false=友方）
	var 消弹方向 = obj.消弹方向;          // 消弹方向限制（"左"/"右"/null）
	var shootZ = obj.shootZ;              // 消弹者的Z轴坐标基准点
	var Z轴攻击范围 = obj.Z轴攻击范围;    // Z轴有效攻击距离
	var 区域定位area = obj.区域定位area;  // 消弹区域的碰撞检测对象
	
	// === 主循环：遍历所有子弹进行消除检测 ===
	// 性能说明：for-in循环在AS2中对MovieClip对象遍历效率较高
	for (var bullet in _root.gameworld.子弹区域)
	{
		var 子弹实例 = _root.gameworld.子弹区域[bullet];
		var Z轴坐标差 = 子弹实例.Z轴坐标 - shootZ;  // 计算子弹与消弹者的Z轴距离
		
		// === 宏展开 + 位掩码性能优化 ===
		// 
		// 核心优化策略：宏展开机制实现零运行时成本的近战子弹检测
		// 
		// 传统方式的性能瓶颈：
		// • 类属性索引：BulletTypesetter.FLAG_MELEE 需要哈希表查找
		// • 运行时查找：每次检测都要访问静态类属性
		// • 内存跳转：从当前作用域跳转到类属性空间
		// 
		// 宏展开优化原理：
		// • 编译时注入：#include 在编译阶段直接将 "var FLAG_MELEE:Number = 1 << 0;" 插入此处
		// • 局部常量：FLAG_MELEE 成为当前函数作用域的栈变量，访问速度最快
		// • 零索引开销：完全绕开类属性哈希查找机制
		// • CPU缓存友好：常量位于连续栈空间，减少内存访问延迟
		// 
		// 位掩码检测原理：
		// • FLAG_MELEE = 1 << 0 = 1 (二进制: 00000001)
		// • 位运算检测：(flags & FLAG_MELEE) 通过按位与操作判断标志位状态
		// • 单次位运算：替代多次字符串比较或布尔属性查找
		// • 紧凑存储：8个子弹类型标志压缩在1个Number中，内存效率最优
		// 
		// 性能提升量化：
		// • 消除属性索引：减少 ~15-20 CPU周期的哈希查找开销
		// • 位运算速度：单次 & 操作仅需 1-2 CPU周期
		// • 内存局部性：提升CPU L1缓存命中率，减少内存总线压力
		// 
		// 编译后等效代码：
		// var FLAG_MELEE:Number = 1;  // 直接注入的局部常量
		// if((子弹实例.flags & 1) || ...) // 运行时的高效位运算检测
		//
		#include "../macros/FLAG_MELEE.as"
		
		// === 三重过滤条件：早期退出优化 ===
		// 1. Z轴距离检查：超出攻击范围的子弹直接跳过
		// 2. 近战子弹检查：使用位掩码快速识别近战类型（近战子弹不能被消除）
		// 3. 静止子弹检查：xmov=0表示静止或特殊状态的子弹，不参与消弹
		if(Math.abs(Z轴坐标差) > Z轴攻击范围 || (子弹实例.flags & FLAG_MELEE) || 子弹实例.xmov == 0){
			continue;
		}
		
		// === 方向过滤：可选的方向限制检查 ===
		var 子弹方向 = 子弹实例.xmov > 0 ? "右" : "左";  // 根据x轴移动方向判断子弹朝向
		if(消弹方向 and 消弹方向 != 子弹方向){           // 如果指定了消弹方向且不匹配，跳过
			continue;
		}
		
		// === 敌我属性检查：确保只消除敌对子弹 ===
		if(消弹敌我属性 != 子弹实例.是否为敌人){
			// === 碰撞检测区域获取 ===
			// 优先使用子弹的专用碰撞区域，如果不存在则使用子弹本身作为检测区域
			var 子弹区域area = 子弹实例.area;
			if(!子弹实例.area){
				子弹区域area = 子弹实例;  // 回退方案：使用子弹实例自身进行碰撞检测
			}
			
			// === 最终碰撞检测与子弹消除 ===
			if(子弹区域area.hitTest(区域定位area)){
				子弹实例.击中地图 = true;  // 标记子弹已被消除
				// 播放子弹消失特效（如果已定义）
				_root.效果(子弹实例.击中地图效果,子弹实例._x,子弹实例._y);
				子弹实例.gotoAndPlay("消失");  // 触发子弹消失动画
			}
		}
	}
};


/**
 * 消弹属性初始化 - 创建标准化的消弹参数对象
 * 
 * 功能说明：
 * • 从消弹区域MovieClip中提取必要的消弹参数
 * • 建立标准化的参数对象结构，供消除子弹函数使用
 * • 设置默认的攻击范围和方向限制
 * 
 * 参数层级关系：
 * 消弹区域 → _parent（角色实例）→ _parent（角色对象）→ 属性数据
 * 
 * @param 消弹区域:MovieClip 消弹技能的作用区域MovieClip对象
 * @return Object 标准化的消弹属性对象，包含以下字段：
 *   - shootZ: 消弹者Z轴坐标（从角色对象获取）
 *   - 消弹敌我属性: 消弹者敌我标识（从角色对象获取）
 *   - 消弹方向: 消弹方向限制（默认为null，表示无方向限制）
 *   - Z轴攻击范围: Z轴有效攻击距离（默认为10单位）
 *   - 区域定位area: 用于碰撞检测的区域对象
 */
_root.消弹属性初始化 = function(消弹区域:MovieClip){
	var 消弹属性 = {
		shootZ:消弹区域._parent._parent.Z轴坐标,           // 从角色对象获取Z轴坐标
		消弹敌我属性:消弹区域._parent._parent.是否为敌人,    // 从角色对象获取敌我属性
		消弹方向:null,                                    // 默认无方向限制
		Z轴攻击范围:10,                                   // 默认Z轴攻击范围为10单位
		区域定位area:消弹区域                             // 消弹区域作为碰撞检测区域
	}
	return 消弹属性;
}
