<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="主唱光剑/主唱光剑" itemID="65548de7-00006134" linkageExportForAS="true" linkageIdentifier="刀-主唱光剑" lastModified="1734949623" lastUniqueIdentifier="7">
  <timeline>
    <DOMTimeline name="主唱光剑">
      <layers>
        <DOMLayer name="Layer 6" color="#FFFF00" outline="true" current="true" isSelected="true" useOutlineView="true">
          <frames>
            <DOMFrame index="0" motionTweenScale="false" keyMode="8192">
              <elements>
                <DOMSymbolInstance libraryItemName="未命名文件夹 1/sprite 10" name="刀口位置3" selected="true" centerPoint3DX="2.4" centerPoint3DY="97.65">
                  <matrix>
                    <Matrix a="0.692108154296875" d="2.19259643554688" tx="-6" ty="88.05"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 耗蓝比例 = 1;
	var 坐标偏移范围 = 10;
	var 自机 = _root.获得父节点(this, 5);
	var 武器类型名 = "武器类型名" + 自机.刀;
	var 主唱光刃类型 = "主唱光刃上轮斩";
	if (自机[增幅次数] == undefined)
	{
		自机[增幅次数] = {};
	}
	this.动态调整位置 = function()
	{//镰刀模式切换位移
		if (自机[武器类型名] == "光剑")
		{
			this._y = 102;
		}
		else
		{
			this._y = 216;
		}
	};
	this.是否兵器跳 = function()
	{
		if (自机._currentframe >= 599 and 自机._currentframe <= 618)
		{
			return true;
		}
		else
		{
			return false;
		}
	};
	this.获得随机时间间隔 = function()
	{
		return _root.随机整数(0, 1 * 1000);
	};
	this.检查并执行时间间隔动作 = _root.检查并执行时间间隔动作;
	this.获得随机坐标偏离 = function()
	{
		var xOffset = (_root.basic_random() - 0.5) * 2 * 坐标偏移范围;
		var yOffset = (_root.basic_random() - 0.5) * 2 * 坐标偏移范围;
		return {x:自机._x + xOffset, y:自机._y + yOffset};
	};

	var 红色音符标识 = 自机.刀 + "红色音符";
	var 红色音符时间戳名 = 红色音符标识 + "时间戳";
	var 红色音符时间间隔 = this.获得随机时间间隔();
	var 红色音符耗蓝量 = Math.floor(自机.mp满血值 / 100 * 耗蓝比例);
	var 红色音符最大增幅次数 = 24;
	var 红色音符攻击力增幅百分比 = 2.5;
	this.创建主唱伙伴 = function()
	{
		var 扭蛋点 = _root.随机整数(1, 100);
		if (扭蛋点 <= 75)
		{
			兵种库 = ["敌人-僵尸1-狗"];
			名字 = "主唱的狗";
		}
		else if (扭蛋点 <= 85)
		{
			兵种库 = ["敌人-辫子姑娘"];
			名字 = "主唱的战斗少女";
		}
		else if (扭蛋点 <= 95)
		{
			兵种库 = ["敌人-狂野玫瑰马尾姑娘"];
			名字 = "主唱的街舞少女";
		}
		else if (扭蛋点 <= 97)
		{
			兵种库 = ["敌人-精英战术少女"];
			名字 = "主唱的精英少女";
		}
		else if (扭蛋点 <= 98)
		{
			兵种库 = ["敌人-双喷少女"];
			名字 = "主唱的学姐";
		}
		else if (扭蛋点 <= 99)
		{
			兵种库 = ["敌人-摇滚公园少女"];
			名字 = "主唱的少女键盘";
		}
		else
		{
			兵种库 = ["敌人-摇滚公园萝莉"];
			名字 = "主唱的萝莉吉他";
		}

		兵种 = 兵种库[random(兵种库.length)];
		等级 = 自机.等级;
		身高 = 自机.身高 + _root.随机整数(-30, -15);
		是否为敌人 = 自机.是否为敌人;
		僵尸型敌人newname = 自机[增幅次数][增幅名] + 兵种;
		_root.加载游戏世界人物(兵种,僵尸型敌人newname,_root.gameworld.getNextHighestDepth(),{_x:自机._x, _y:自机._y, 等级:this.等级, 名字:this.名字 + "[" + 扭蛋点 + "]", 是否为敌人:this.是否为敌人, 身高:this.身高});
		_root.效果("升级动画2",自机._x,自机._y,100);
		_root.发布消息("召唤主唱的伙伴[" + 名字 + "]！");
	};
	this.释放红色音符 = function()
	{
		var myPoint = this.获得随机坐标偏离();
		var 增幅名 = 红色音符标识 + "攻击增幅";

		if (自机[增幅次数][增幅名] === undefined)
		{
			自机[增幅次数][增幅名] = 1;
		}
		if (自机[增幅次数][增幅名] <= 红色音符最大增幅次数)
		{
			自机.空手攻击力 *= (100 + 红色音符攻击力增幅百分比) / 100;
			_root.发布消息("攻击力第" + 自机[增幅次数][增幅名] + "次上升" + 红色音符攻击力增幅百分比 + "%！目前攻击力为" + Math.floor(自机.空手攻击力) + "点！");
			自机[增幅次数][增幅名] += 1;
		}
		if (自机[增幅次数][增幅名] == 12 or 自机[增幅次数][增幅名] == 24)
		{
			this.创建主唱伙伴();
		}
		声音 = "";
		霰弹值 = 1;
		子弹散射度 = 360;
		发射效果 = "";
		子弹种类 = "红色音符";
		子弹威力 = 红色音符耗蓝量 * 10;
		子弹速度 = 3;
		击中地图效果 = "";
		Z轴攻击范围 = 20;
		击倒率 = 100;
		击中后子弹的效果 = "";
		子弹敌我属性 = true;
		发射者名 = 自机._name;
		子弹敌我属性值 = !自机.是否为敌人;
		shootX = myPoint.x;
		Z轴坐标 = shootY = 自机._y;
		_root.子弹区域shoot(声音,霰弹值,子弹散射度,发射效果,子弹种类,子弹威力,子弹速度,Z轴攻击范围,击中地图效果,发射者名,shootX,shootY,Z轴坐标,子弹敌我属性值,击倒率,击中后子弹的效果);
		自机.mp -= 红色音符耗蓝量;
		红色音符时间间隔 = this.获得随机时间间隔();
	};

	var 猩红增幅标识 = 自机.刀 + "猩红增幅";
	var 猩红增幅时间戳名 = 猩红增幅标识 + "时间戳";
	var 猩红增幅时间间隔 = this.获得随机时间间隔() * 6;
	var 猩红增幅耗蓝量 = Math.floor(自机.mp满血值 / 100 * 耗蓝比例 / 2);

	this.集体加血 = function(加血距离X, 加血距离Y)
	{
		var 是否加血成功:Boolean = false;
		for (each in _root.gameworld)
		{
			if (_root.gameworld[each].是否为敌人 == 自机.是否为敌人)
			{
				if (Math.abs(_root.gameworld[each]._x - 自机._x) < 加血距离X and Math.abs(_root.gameworld[each]._y - 自机._y) < 加血距离Y)
				{
					if (_root.gameworld[each].hp > 0 and _root.gameworld[each].hp < _root.gameworld[each].hp满血值)
					{
						_root.gameworld[each].hp += 猩红增幅耗蓝量 * 4 + Math.floor(_root.gameworld[each].hp满血值 * 0.03);
						if (_root.gameworld[each].hp > _root.gameworld[each].hp满血值)
						{
							_root.gameworld[each].hp = _root.gameworld[each].hp满血值;
						}
						_root.效果("猩红增幅",_root.gameworld[each]._x,_root.gameworld[each]._y,100,true);
						是否加血成功 = true;
					}
				}
			}
		}
		自机.mp -= 猩红增幅耗蓝量;
	};

	this.释放猩红增幅 = function()
	{
		var 回血量 = 猩红增幅耗蓝量 * 8;
		this.集体加血(900,600,回血量);


	};
	var 主唱光刃标识 = 自机.刀 + "主唱光刃";
	var 主唱光刃时间戳名 = 主唱光刃标识 + "时间戳";
	var 主唱光刃时间间隔 = 500;
	var 主唱光刃耗蓝量 = Math.floor(自机.mp满血值 / 100 * 耗蓝比例);
	if (自机.上次主唱光刃类型 == undefined)
	{
		自机.上次主唱光刃类型 = "主唱光刃突刺";
	}
	this.释放主唱光刃 = function()
	{
		var myPoint = {x:this._x, y:this._y};
		_parent.localToGlobal(myPoint);
		_root.gameworld.globalToLocal(myPoint);

		声音 = "";
		霰弹值 = 1;
		子弹散射度 = 0;
		发射效果 = "";
		子弹种类 = 主唱光刃类型;
		子弹威力 = 自机.空手攻击力 * 0.5 + 自机.话筒支架基础伤害 * 2;
		子弹速度 = 0;
		击中地图效果 = "";
		Z轴攻击范围 = 50;
		击倒率 = 10;
		击中后子弹的效果 = "";
		子弹敌我属性 = true;
		发射者名 = 自机._name;
		子弹敌我属性值 = !自机.是否为敌人;
		shootX = myPoint.x;
		Z轴坐标 = shootY = 自机._y;
		_root.子弹区域shoot(声音,霰弹值,子弹散射度,发射效果,子弹种类,子弹威力,子弹速度,Z轴攻击范围,击中地图效果,发射者名,shootX,shootY,Z轴坐标,子弹敌我属性值,击倒率,击中后子弹的效果);
		if (主唱光刃类型 == "主唱光刃突刺")
		{
			自机.mp -= 主唱光刃耗蓝量;
		}


	};
	this.动态调整位置();
	this.onEnterFrame = function()
	{
		if (_root.兵器攻击检测(自机) and 自机.mp >= 主唱光刃耗蓝量)
		{
			if (自机[武器类型名] == "光剑")
			{
				if (this.是否兵器跳())
				{
					if (自机.man._currentframe == 4)
					{
						主唱光刃时间间隔 = 300;
						主唱光刃类型 = "主唱光刃上劈斩";//保证每一刀都能触发且仅触发一次
					}
					else
					{
						主唱光刃时间间隔 = 1000;
						主唱光刃类型 = "主唱光刃";//其他情况不触发
					}
				}
				else
				{
					switch (自机.getSmallState())
					{
						case "兵器一段前" :
							主唱光刃类型 = "主唱光刃上轮斩";
							break;
						case "兵器一段中" :
							主唱光刃类型 = "主唱光刃";//一段中无特效
							break;
						case "兵器二段中" :
							主唱光刃类型 = "主唱光刃下轮斩";
							break;
						case "兵器三段中" :
							主唱光刃类型 = "主唱光刃上挑斩";
							break;
						case "兵器四段中" :
							主唱光刃类型 = "主唱光刃下撩斩";
							break;
						case "兵器五段中" :
							主唱光刃类型 = "主唱光刃下圈斩";
							break;
						default :
							主唱光刃类型 = "主唱光刃突刺";

					}

					if (主唱光刃类型 != "主唱光刃突刺" and 自机.上次主唱光刃类型 != 主唱光刃类型)
					{
						主唱光刃时间间隔 = 0;//保证每一刀都能触发且仅触发一次
						//_root.调试模式 = true;
						//_root.发布调试消息(自机.getSmallState() + " " + 主唱光刃类型 + " " + 自机.上次主唱光刃类型);
					}
					else
					{
						主唱光刃时间间隔 = 1200;
					}

					自机.上次主唱光刃类型 = 主唱光刃类型;
				}
				this.检查并执行时间间隔动作(自机,主唱光刃时间间隔,"释放主唱光刃",主唱光刃时间戳名);
			}
			else
			{
				if (自机.mp >= 红色音符耗蓝量)
				{
					this.检查并执行时间间隔动作(自机,红色音符时间间隔,"释放红色音符",红色音符时间戳名);
				}
			}

			if (自机.mp >= 猩红增幅耗蓝量)
			{
				this.检查并执行时间间隔动作(自机,猩红增幅时间间隔,"释放猩红增幅",猩红增幅时间戳名);
			}

		}
		this.动态调整位置();
	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 4" color="#FFFF00" outline="true" useOutlineView="true">
          <frames>
            <DOMFrame index="0" motionTweenScale="false" keyMode="8192">
              <elements>
                <DOMSymbolInstance libraryItemName="未命名文件夹 1/sprite 10" name="刀口位置2" centerPoint3DX="2.2" centerPoint3DY="36.5">
                  <matrix>
                    <Matrix a="0.692108154296875" d="2.435546875" tx="-6" ty="27.15"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 2" color="#FFFF00" outline="true" useOutlineView="true">
          <frames>
            <DOMFrame index="0" motionTweenScale="false" keyMode="8192">
              <elements>
                <DOMSymbolInstance libraryItemName="未命名文件夹 1/sprite 10" name="刀口位置1" centerPoint3DX="2.2" centerPoint3DY="152.65">
                  <matrix>
                    <Matrix a="0.692108154296875" d="2.42875671386719" tx="-6" ty="142.65"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 自机 = _root.获得父节点(this, 5);
	var 武器类型名 = "武器类型名" + 自机.刀;
	this.动态调整位置 = function()
	{//镰刀模式切换位移
		if (自机[武器类型名] == "光剑")
		{
			this._y = 164;
		}
		else
		{
			this._y = 363;
		}
	};
	this.动态调整位置();
	this.onEnterFrame = function()
	{
		this.动态调整位置();
	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 1" color="#FFFF00">
          <frames>
            <DOMFrame index="0" motionTweenScale="false" keyMode="8192">
              <elements>
                <DOMSymbolInstance libraryItemName="主唱光剑/主唱光剑动画" name="动画" centerPoint3DX="36.8" centerPoint3DY="71.85">
                  <matrix>
                    <Matrix a="0" b="-4.19134521484375" c="4.19134521484375" d="0" tx="-561.15" ty="770.55"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="181.7" y="134.75"/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 自机 = _root.获得父节点(this, 5);
	var 动画时长 = 15;
	var 变形时间间隔 = 1 * 1000;
	var 时间戳名 = 自机.刀 + "时间戳";
	var 武器类型名 = "武器类型名" + 自机.刀;
	var 动画帧名 = 自机.刀 + "动画帧";
	this.切换为话筒支架 = function()
	{
		自机[武器类型名] = "话筒支架";
		自机.刀属性数组[13] = 自机.话筒支架基础伤害 * 0.8;
	};
	this.切换为光剑 = function()
	{
		自机[武器类型名] = "光剑";
		自机.刀属性数组[13] = 自机.话筒支架基础伤害;
	};

	this.切换武器形态 = function()
	{
		(自机[武器类型名] == "光剑") ? this.切换为话筒支架() : this.切换为光剑();
	};
	if (自机[动画帧名] == undefined)
	{
		自机[动画帧名] = 1;
	}

	this.保存武装类型 = function()
	{
		if (_root.控制目标 == 自机._name)
		{
			_root[武器类型名] = 自机[武器类型名];//_root.发布调试消息(_root[武器类型名] + " " + 自机.武器类型);
		}
	};

	this.读取武装类型 = function()
	{
		if (_root.控制目标 == 自机._name and _root[武器类型名] == "话筒支架")
		{
			this.切换为话筒支架();
			//_root.发布调试消息(_root[武器类型名] + " " + 自机.武器类型);
		}
	};

	if (isNaN(自机.话筒支架基础伤害))
	{//初始化话筒支架数据

		自机.话筒支架基础伤害 = 自机.刀属性数组[13];
		自机[武器类型名] = "光剑";
		this.读取武装类型();
	}


	gotoAndStop(自机[动画帧名]);
	this.判断是否展开 = function()
	{
		if (!_root.兵器使用检测(自机) and 自机.攻击模式 != "兵器" or 自机[武器类型名] == "话筒支架")
		{
			return false;
		}

		var 当前帧 = 自机.man._currentframe;
		if (当前帧 >= 370 and 当前帧 <= 413)
		{
			自机[动画帧名] = Math.max(自机[动画帧名], Math.floor(动画时长 * 2 / 3));// 凶斩的帧区间  
		}

		return true;
	};
	this.展开动画 = function()
	{
		if (自机[动画帧名] < 动画时长)
		{
			自机[动画帧名] += 1;
		}
	};
	this.折叠动画 = function()
	{
		if (自机[动画帧名] > 1)
		{
			自机[动画帧名] -= 1;
		}
	};

	this.检查并执行时间间隔动作 = _root.检查并执行时间间隔动作;

	this.执行武器切换 = function()
	{
		this.切换武器形态();
		_root.发布消息("话筒支架武器类型切换为[" + 自机[武器类型名] + "]");
		this.保存武装类型();
	};
	this.onEnterFrame = function()
	{
		if (Key.isDown(_root.武器变形键) and 自机.攻击模式 == "兵器")
		{
			this.检查并执行时间间隔动作(自机,变形时间间隔,"执行武器切换",时间戳名);
		}

		this[this.判断是否展开() ? '展开动画' : '折叠动画']();
		gotoAndStop(自机[动画帧名]);
	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>