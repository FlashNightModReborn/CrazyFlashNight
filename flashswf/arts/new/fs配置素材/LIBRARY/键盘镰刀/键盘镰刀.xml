<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="键盘镰刀/键盘镰刀" itemID="65547c88-00005e3b" linkageExportForAS="true" linkageIdentifier="刀-键盘镰刀" lastModified="1721580778" lastUniqueIdentifier="8">
  <timeline>
    <DOMTimeline name="键盘镰刀">
      <layers>
        <DOMLayer name="Layer 6" color="#FF0000" outline="true" useOutlineView="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" motionTweenScale="false" keyMode="8192">
              <elements>
                <DOMSymbolInstance libraryItemName="未命名文件夹 1/sprite 10" name="刀口位置3" centerPoint3DX="-398.1" centerPoint3DY="649.75">
                  <matrix>
                    <Matrix a="8.91448974609375" tx="-410.6" ty="637.25"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 自机 = _root.获得父节点(this, 5);
	var 武器类型名 = "武器类型名" + 自机.刀;
	var 跳砍甜区距离X = 195;
	var 跳砍甜区X宽容度 = 99;
	var 跳砍追踪X速度 = 自机.行走X速度 / 10;
	var 跳砍追踪强度容量 = 240;
	var 跳砍追踪强度下限 = 3;
	if (isNaN(自机.跳砍追踪强度))
	{
		自机.跳砍追踪强度 = 跳砍追踪强度下限;
	}

	var 耗蓝比例 = 5;
	var 坐标偏移范围 = 10;
	//_root.调试模式 = true;
	this.动态调整位置 = function()
	{//镰刀模式切换位移
		if (自机[武器类型名] == "镰刀")
		{
			this._x = -410.6;
			this._y = 637.25;
		}
		else
		{
			this._x = 12;
			this._y = 35;
		}
	};
	this.检查并执行时间间隔动作 = _root.检查并执行时间间隔动作;
	this.获得随机坐标偏离 = _root.获得随机坐标偏离;

	this.动态调整位置();
	this.是否兵器跳 = function()
	{
		if (自机._currentframe >= 599 and 自机._currentframe <= 618)
		{
			return true;
		}
		else
		{
			return false;
		}
	};
	this.寻找攻击目标 = _root.寻找攻击目标基础函数;

	this.获得敌我距离差 = function()
	{
		//_root.发布调试消息(自机.攻击目标 + _root.gameworld[自机.攻击目标]._x);
		if (自机.攻击目标 != "无")
		{
			return {x:_root.gameworld[自机.攻击目标]._x - 自机._x, y:_root.gameworld[自机.攻击目标].Z轴坐标 - 自机.Z轴坐标};
		}
		return {x:0, y:0};// 异常处理，如果没有找到目标，返回 {0, 0}  
	};
	this.镰刀跳砍修正 = function()
	{
		this.寻找攻击目标(自机);
		if (自机.攻击目标 != "无")
		{
			var 修正系数 = 自机.跳砍追踪强度 / 跳砍追踪强度容量;
			var 距离差 = this.获得敌我距离差();
			var 距离差X = 距离差.x;
			var 距离差Y = 距离差.y;
			var 甜区距离X = 跳砍甜区距离X * 自机.身高 / 175;
			var 宽容距离X = 甜区距离X * 跳砍甜区X宽容度 / 100 * 修正系数;
			var 修正距离X = (跳砍追踪X速度 + Math.abs(距离差X) / 30) * 修正系数;
			var 是否充能 = 自机.跳砍追踪强度 > 跳砍追踪强度下限 ? true : false;
			// X轴修正，宽容距离代表自动修正
			//自机._x += 距离差X > 甜区距离X - 宽容距离X ? Math.min(修正距离X, 距离差X - 甜区距离X) : (距离差X + 甜区距离X - 宽容距离X < 0 ? Math.max(-1 * 修正距离X, 距离差X + 甜区距离X) : 0);
			var 移动方向 = 距离差.x > 0 ? "右" : "左";
			var 速度 = 距离差X > 甜区距离X - 宽容距离X ? Math.min(修正距离X, 距离差X - 甜区距离X) : (距离差X + 甜区距离X - 宽容距离X < 0 ? Math.max(-1 * 修正距离X, 距离差X + 甜区距离X) : 0);
			if (移动方向 == "左")
			{
				速度 *= -1;
			}
			自机.移动(移动方向,速度);
			// 设置左右方向     
			if (是否充能)
			{
				自机.跳跃中左右方向 = 移动方向;
				自机.方向改变(自机.跳跃中左右方向);
				if (自机.跳砍追踪强度 == 4)
				{
					_root.发布消息("镰刀追踪充能衰竭！");
				}
				else if (自机.跳砍追踪强度 == Math.floor(跳砍追踪强度容量 * 0.5))
				{
					_root.发布消息("镰刀追踪充能还剩50%！");
				}
				else if (自机.跳砍追踪强度 == Math.floor(跳砍追踪强度容量 * 0.2))
				{
					_root.发布消息("镰刀追踪充能还剩20%！");
				}
				自机.跳砍追踪强度 -= 1;//自动衰减强度
			}
			// Y轴修正                                                      
			if (自机.跳横移速度 == 0)
			{
				自机.跳跃中上下方向 = 距离差.y > 0 ? "下" : "上";
				自机.跳跃上下移动(自机.跳跃中上下方向,自机.跳跃中移动速度 / 2 * 修正系数);
			}
		}
	};

	var 追踪充能标识 = 自机.刀 + "追踪充能";
	var 追踪充能时间戳名 = 追踪充能标识 + "时间戳";
	var 追踪充能时间间隔 = 1 * 1000;
	var 追踪充能耗蓝量 = Math.floor(自机.mp满血值 / 100 * 耗蓝比例);

	this.追踪充能 = function(充能数值:Number)
	{
		自机.跳砍追踪强度 = Math.min(跳砍追踪强度容量, 自机.跳砍追踪强度 + 充能数值);
	};
	this.释放追踪充能 = function()
	{
		var myPoint = this.获得随机坐标偏离(自机, 坐标偏移范围);

		声音 = "";
		霰弹值 = 1;
		子弹散射度 = 360;
		发射效果 = "";
		子弹种类 = "天蓝增幅";
		子弹威力 = 追踪充能耗蓝量 * 1;
		子弹速度 = 0;
		击中地图效果 = "";
		Z轴攻击范围 = 50;
		击倒率 = 1;
		击中后子弹的效果 = "";
		子弹敌我属性 = true;
		发射者名 = 自机._name;
		子弹敌我属性值 = !自机.是否为敌人;
		shootX = myPoint.x;
		Z轴坐标 = shootY = 自机._y;
		_root.子弹区域shoot(声音,霰弹值,子弹散射度,发射效果,子弹种类,子弹威力,子弹速度,Z轴攻击范围,击中地图效果,发射者名,shootX,shootY,Z轴坐标,子弹敌我属性值,击倒率,击中后子弹的效果);
		if (自机.跳砍追踪强度 < 跳砍追踪强度容量)
		{
			自机.mp -= 追踪充能耗蓝量;
			this.追踪充能(追踪充能耗蓝量 * 3);
		}

	};
	this.充能跳砍追踪强度 = function()
	{
		if (自机.mp >= 追踪充能耗蓝量)
		{
			this.释放追踪充能();
			_root.发布消息("镰刀追踪充能至" + Math.floor(自机.跳砍追踪强度 / 跳砍追踪强度容量 * 1000) / 10 + "%!");
		}
	};
	var 战技时间戳名 = 自机.刀 + "战技" + "时间戳";
	var 战技时间间隔 = 10 * 1000;
	var 战技mp消耗 = 30;

	this.释放战技 = function()
	{
		自机.技能名 = "瞬步斩";
		自机.技能等级 = Math.min(10, _root.获得强化等级(_root.刀));
		自机.mp -= 战技mp消耗;
		自机.状态改变("技能");
	};
	this.onEnterFrame = function()
	{
		this.动态调整位置();

		if (自机[武器类型名] == "镰刀")
		{
			if (this.是否兵器跳())
			{
				if (Key.isDown(_root.武器技能键))
				{
					this.检查并执行时间间隔动作(自机,追踪充能时间间隔,"充能跳砍追踪强度",追踪充能时间戳名);

				}
				this.镰刀跳砍修正();
			}
			else
			{
				if (Key.isDown(_root.武器技能键) and 自机.攻击模式 == "兵器" and 自机.mp >= 战技mp消耗)
				{
					this.检查并执行时间间隔动作(自机,战技时间间隔,"释放战技",战技时间戳名);
				}
			}
		}


	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 4" color="#FF0000" outline="true" useOutlineView="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" motionTweenScale="false" keyMode="8192">
              <elements>
                <DOMSymbolInstance libraryItemName="未命名文件夹 1/sprite 10" name="刀口位置2" centerPoint3DX="-58.85" centerPoint3DY="725.45">
                  <matrix>
                    <Matrix a="-12.2712097167969" tx="-29.45" ty="712.95"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="12.5"/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 耗蓝比例 = 1;
	var 坐标偏移范围 = 10;
	var 自机 = _root.获得父节点(this, 5);
	var 武器类型名 = "武器类型名" + 自机.刀;
	if (自机[增幅次数] == undefined)
	{
		自机[增幅次数] = {};
	}
	this.动态调整位置 = function()
	{//镰刀模式切换位移
		if (自机[武器类型名] == "镰刀")
		{
			this._x = -182.35;
			this._y = 712.95;
		}
		else
		{
			this._x = 16;
			this._y = 125;
		}
	};
	this.获得随机时间间隔 = function()
	{
		return _root.随机整数(200, 1 * 1000);
	};
	this.检查并执行时间间隔动作 = _root.检查并执行时间间隔动作;
	this.获得随机坐标偏离 = _root.获得随机坐标偏离;

	var 蓝色音符标识 = 自机.刀 + "蓝色音符";
	var 蓝色音符时间戳名 = 蓝色音符标识 + "时间戳";
	var 蓝色音符时间间隔 = this.获得随机时间间隔();
	var 蓝色音符耗蓝量 = Math.floor(自机.mp满血值 / 100 * 耗蓝比例);
	var 蓝色音符最大增幅次数 = 24;
	var 蓝色音符速度增幅百分比 = 2.5;
	this.释放蓝色音符 = function()
	{
		var myPoint = this.获得随机坐标偏离(自机, 坐标偏移范围);
		var 增幅名 = 蓝色音符标识 + "攻击增幅";

		if (自机[增幅次数][增幅名] === undefined)
		{
			自机[增幅次数][增幅名] = 1;
		}
		if (自机[增幅次数][增幅名] <= 蓝色音符最大增幅次数)
		{
			var 速度提升系数 = (100 + 蓝色音符速度增幅百分比) / 100;
			自机.行走X速度 *= 速度提升系数;
			自机.跳跃中移动速度 *= 速度提升系数;
			自机.行走Y速度 *= 速度提升系数;
			自机.跑X速度 *= 速度提升系数;
			自机.跑Y速度 *= 速度提升系数;
			自机.被击硬直度 /= 速度提升系数;
			自机.起跳速度 *= 速度提升系数;
			_root.发布消息("速度第" + 自机[增幅次数][增幅名] + "次上升" + 蓝色音符速度增幅百分比 + "%！目前速度为" + Math.floor(自机.行走X速度 * 20) / 10 + "m/s！");
			自机[增幅次数][增幅名] += 1;
		}
		声音 = "";
		霰弹值 = 1;
		子弹散射度 = 360;
		发射效果 = "";
		子弹种类 = "蓝色音符";
		子弹威力 = 蓝色音符耗蓝量 * 10;
		子弹速度 = 3;
		击中地图效果 = "";
		Z轴攻击范围 = 20;
		击倒率 = 100;
		击中后子弹的效果 = "";
		子弹敌我属性 = true;
		发射者名 = 自机._name;
		子弹敌我属性值 = !自机.是否为敌人;
		shootX = myPoint.x;
		Z轴坐标 = shootY = 自机._y;
		_root.子弹区域shoot(声音,霰弹值,子弹散射度,发射效果,子弹种类,子弹威力,子弹速度,Z轴攻击范围,击中地图效果,发射者名,shootX,shootY,Z轴坐标,子弹敌我属性值,击倒率,击中后子弹的效果);
		蓝色音符时间间隔 = this.获得随机时间间隔();
	};

	var 天蓝增幅标识 = 自机.刀 + "天蓝增幅";
	var 天蓝增幅时间戳名 = 天蓝增幅标识 + "时间戳";
	var 天蓝增幅时间间隔 = this.获得随机时间间隔() * 3;
	var 天蓝增幅耗蓝量 = Math.floor(自机.mp满血值 / 100 * 耗蓝比例 / 2);

	this.释放天蓝增幅 = function()
	{
		var myPoint = this.获得随机坐标偏离(自机, 坐标偏移范围);

		声音 = "";
		霰弹值 = 1;
		子弹散射度 = 360;
		发射效果 = "";
		子弹种类 = "天蓝增幅";
		子弹威力 = 天蓝增幅耗蓝量 * 30;
		子弹速度 = 0;
		击中地图效果 = "";
		Z轴攻击范围 = 50;
		击倒率 = 1;
		击中后子弹的效果 = "";
		子弹敌我属性 = true;
		发射者名 = 自机._name;
		子弹敌我属性值 = !自机.是否为敌人;
		shootX = myPoint.x;
		Z轴坐标 = shootY = 自机._y;
		_root.子弹区域shoot(声音,霰弹值,子弹散射度,发射效果,子弹种类,子弹威力,子弹速度,Z轴攻击范围,击中地图效果,发射者名,shootX,shootY,Z轴坐标,子弹敌我属性值,击倒率,击中后子弹的效果);
		自机.mp -= 天蓝增幅耗蓝量;
		天蓝增幅时间间隔 = this.获得随机时间间隔() * 3;
		if (自机.mp < 自机.mp满血值)
		{
			var 回蓝量 = Math.min(自机.mp满血值 - 自机.mp, 天蓝增幅耗蓝量 * 2);
			自机.mp += 回蓝量;
			_parent.刀口位置3.追踪充能(回蓝量 * 3);
		}
		_parent.刀口位置3.追踪充能(回蓝量 * 3);
		_root.发布消息("镰刀追踪充能至" + Math.floor(自机.跳砍追踪强度 / _parent.刀口位置3.跳砍追踪强度容量 * 1000) / 10 + "%!");

	};
	var 镰刀光斩标识 = 自机.刀 + "镰刀光斩";
	var 镰刀光斩时间戳名 = 镰刀光斩标识 + "时间戳";
	var 镰刀光斩时间间隔 = this.获得随机时间间隔();
	var 镰刀光斩耗蓝量 = Math.floor(自机.mp满血值 / 100 * 耗蓝比例);
	this.释放镰刀光斩 = function()
	{

		声音 = "";
		霰弹值 = 1;
		子弹散射度 = 0;
		发射效果 = "";
		子弹种类 = "镰刀光斩";
		子弹威力 = 镰刀光斩耗蓝量 * 30 + 自机.键盘基础伤害;
		子弹速度 = 0;
		击中地图效果 = "";
		Z轴攻击范围 = 40;
		击倒率 = 10;
		击中后子弹的效果 = "";
		子弹敌我属性 = true;
		发射者名 = 自机._name;
		子弹敌我属性值 = !自机.是否为敌人;
		var 修正 = 195 * 自机.身高 / 175;
		if (自机.方向 == "左")
		{
			修正 *= -1;
		}
		shootX = 自机._x + 修正;
		Z轴坐标 = shootY = 自机._y;
		_root.子弹区域shoot(声音,霰弹值,子弹散射度,发射效果,子弹种类,子弹威力,子弹速度,Z轴攻击范围,击中地图效果,发射者名,shootX,shootY,Z轴坐标,子弹敌我属性值,击倒率,击中后子弹的效果);
		镰刀光斩时间间隔 = this.获得随机时间间隔();
	};
	this.动态调整位置();
	this.onEnterFrame = function()
	{
		var 释放光斩:Boolean = false;
		if (_root.兵器攻击检测(自机))
		{
			if (自机[武器类型名] == "镰刀")
			{
				if (!_parent.动画.正在使用瞬步斩())
				{
					if (_parent.刀口位置3.是否兵器跳() and 自机.man._currentframe >= 5 and false)
					{
						释放光斩 = true;//跳砍
					}
					else if (自机._currentframe >= 619 and 自机._currentframe <= 628 and false)
					{
						switch (自机.man._currentframe)
						{
							case 7 :
							case 20 :
							case 34 :
							case 50 :
								释放光斩 = true;//平砍
								break;
						}
					}
					else
					{
						释放光斩 = true;
					}
				}
				if (释放光斩)
				{
					this.检查并执行时间间隔动作(自机,镰刀光斩时间间隔,"释放镰刀光斩",镰刀光斩时间戳名);
				}
			}
			else
			{
				this.检查并执行时间间隔动作(自机,蓝色音符时间间隔,"释放蓝色音符",蓝色音符时间戳名);
				this.检查并执行时间间隔动作(自机,天蓝增幅时间间隔,"释放天蓝增幅",天蓝增幅时间戳名);

			}
		}
		this.动态调整位置();
	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 2" color="#FF0000" outline="true" useOutlineView="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" motionTweenScale="false" keyMode="8192">
              <elements>
                <DOMSymbolInstance libraryItemName="未命名文件夹 1/sprite 10" name="刀口位置1" centerPoint3DX="22.7" centerPoint3DY="649.75">
                  <matrix>
                    <Matrix a="8.06597900390625" tx="-166.45" ty="637.25"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="25"/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 自机 = _root.获得父节点(this, 5);
	var 武器类型名 = "武器类型名" + 自机.刀;
	this.动态调整位置 = function()
	{//镰刀模式切换位移
		if (自机[武器类型名] == "镰刀")
		{
			this._x = 35.125;
			this._y = 637.25;
		}
		else
		{
			this._x = 20;
			this._y = 245;
		}
	};
	this.动态调整位置();
	this.onEnterFrame = function()
	{
		this.动态调整位置();
	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 1" color="#666666" outline="true" current="true" isSelected="true" useOutlineView="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" motionTweenScale="false" keyMode="8192">
              <elements>
                <DOMSymbolInstance libraryItemName="键盘镰刀/键盘镰刀动画" name="动画" selected="true" centerPoint3DX="-163.1" centerPoint3DY="-17.9">
                  <matrix>
                    <Matrix a="0.0951080322265625" b="4.33209228515625" c="-4.33209228515625" d="0.0951080322265625" tx="372" ty="-241.95"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="57.1" y="85.65"/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 自机 = _root.获得父节点(this, 5);
	var 动画时长 = 15;
	var 变形时间间隔 = 1 * 1000;
	var 时间戳名 = 自机.刀 + "时间戳";
	var 武器类型名 = "武器类型名" + 自机.刀;
	var 动画帧名 = 自机.刀 + "动画帧";
	var 耗蓝比例 = 1;
	var 坐标偏移范围 = 10;
	this.检查并执行时间间隔动作 = _root.检查并执行时间间隔动作;


	this.获得随机时间间隔 = function()
	{
		return _root.随机整数(50, 150);
	};
	var 镰刀风车斩标识 = 自机.刀 + "镰刀风车斩";
	var 镰刀风车斩时间戳名 = 镰刀风车斩标识 + "时间戳";
	var 镰刀风车斩时间间隔 = this.获得随机时间间隔();
	var 镰刀风车斩耗蓝量 = Math.floor(自机.mp满血值 / 100 * 耗蓝比例);
	this.释放镰刀风车斩 = function()
	{
		var myPoint = {x:_parent._x, y:_parent._y};
		_parent.localToGlobal(myPoint);
		_root.gameworld.globalToLocal(myPoint);

		声音 = "";
		霰弹值 = 1;
		子弹散射度 = 360;
		发射效果 = "";
		子弹种类 = "镰刀风车斩";
		子弹威力 = 镰刀风车斩耗蓝量 * 30 + 自机.键盘基础伤害;
		子弹速度 = 0;
		击中地图效果 = "";
		Z轴攻击范围 = 40;
		击倒率 = 10;
		击中后子弹的效果 = "";
		子弹敌我属性 = true;
		发射者名 = 自机._name;
		子弹敌我属性值 = !自机.是否为敌人;
		shootX = myPoint.x;
		Z轴坐标 = shootY = 自机._y - 50;
		_root.子弹区域shoot(声音,霰弹值,子弹散射度,发射效果,子弹种类,子弹威力,子弹速度,Z轴攻击范围,击中地图效果,发射者名,shootX,shootY,Z轴坐标,子弹敌我属性值,击倒率,击中后子弹的效果);
		镰刀风车斩时间间隔 = this.获得随机时间间隔();
	};

	this.切换为键盘 = function()
	{
		自机[武器类型名] = "键盘";
		自机.刀属性数组[13] = 自机.键盘基础伤害 * 0.8;
	};
	this.切换为镰刀 = function()
	{
		自机[武器类型名] = "镰刀";
		自机.刀属性数组[13] = 自机.键盘基础伤害;
	};

	this.切换武器形态 = function()
	{
		(自机[武器类型名] == "镰刀") ? this.切换为键盘() : this.切换为镰刀();
	};
	if (自机[动画帧名] == undefined)
	{
		自机[动画帧名] = 1;
	}

	this.保存武装类型 = function()
	{
		if (_root.控制目标 == 自机._name)
		{
			_root[武器类型名] = 自机[武器类型名];//_root.发布调试消息(_root[武器类型名] + " " + 自机.武器类型);
		}
	};

	this.读取武装类型 = function()
	{
		if (_root.控制目标 == 自机._name and _root[武器类型名] == "键盘")
		{
			this.切换为键盘();
			//_root.发布调试消息(_root[武器类型名] + " " + 自机.武器类型);
		}
	};

	if (isNaN(自机.键盘基础伤害))
	{//初始化键盘数据

		自机.键盘基础伤害 = 自机.刀属性数组[13];
		自机.键盘旋转角度 = _parent._rotation;
		自机.键盘水平宽度 = _parent._xscale;
		自机.键盘刀口位置 = _parent.刀口位置1._x;
		自机[武器类型名] = "镰刀";
		this.读取武装类型();
	}


	gotoAndStop(自机[动画帧名]);
	this.判断是否展开 = function()
	{
		if (!_root.兵器使用检测(自机) and 自机.攻击模式 != "兵器" or 自机[武器类型名] == "键盘")
		{
			return false;
		}

		var 当前帧 = 自机.man._currentframe;
		if (当前帧 >= 370 and 当前帧 <= 413)
		{
			自机[动画帧名] = Math.max(自机[动画帧名], Math.floor(动画时长 * 2 / 3));// 凶斩的帧区间  
		}

		return true;
	};
	this.展开动画 = function()
	{
		if (自机[动画帧名] < 动画时长)
		{
			自机[动画帧名] += 1;
		}
	};
	this.折叠动画 = function()
	{
		if (自机[动画帧名] > 1)
		{
			自机[动画帧名] -= 1;
		}
	};

	this.检查并执行时间间隔动作 = _root.检查并执行时间间隔动作;

	this.执行武器切换 = function()
	{
		this.切换武器形态();
		_root.发布消息("键盘武器类型切换为[" + 自机[武器类型名] + "]");
		this.保存武装类型();
	};
	this.正在使用瞬步斩 = function()
	{
		if (自机.状态 == "技能" and 自机.man._currentframe >= 370 and 自机.man._currentframe <= 405 and 自机[武器类型名] == "镰刀")
		{
			return true;//瞬步斩结束与413帧，为视觉效果提前回收
		}
		return false;
	};
	this.改变握持模式 = function()
	{
		if (this.正在使用瞬步斩())
		{
			this._y = -600;
			_parent._rotation += _root.随机整数(60, 120);
			_parent._xscale = 自机.键盘水平宽度 / 4;
			this.检查并执行时间间隔动作(自机,镰刀风车斩时间间隔,"释放镰刀风车斩",镰刀风车斩时间戳名);
		}
		else
		{
			this._y = -242;
			_parent._rotation = 自机.键盘旋转角度;
			_parent._xscale = 自机.键盘水平宽度;
		}
	};

	this.改变握持模式();
	this.onEnterFrame = function()
	{
		if (Key.isDown(_root.武器变形键) and 自机.攻击模式 == "兵器")
		{
			this.检查并执行时间间隔动作(自机,变形时间间隔,"执行武器切换",时间戳名);
		}
		this.改变握持模式();
		this[this.判断是否展开() ? '展开动画' : '折叠动画']();
		gotoAndStop(自机[动画帧名]);
	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>