<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="UI重构/存档显示块" itemID="68521747-000225fa" lastModified="1752593565" lastUniqueIdentifier="4">
  <timeline>
    <DOMTimeline name="存档显示块" guides='&lt;guidelines&gt;&lt;guideline direction="v"&gt;62&lt;/guideline&gt;&lt;guideline direction="h"&gt;23&lt;/guideline&gt;&lt;guideline direction="h"&gt;4&lt;/guideline&gt;&lt;guideline direction="h"&gt;58&lt;/guideline&gt;&lt;guideline direction="v"&gt;0&lt;/guideline&gt;&lt;guideline direction="v"&gt;65&lt;/guideline&gt;&lt;/guidelines&gt;'>
      <layers>
        <DOMLayer name="图层 3" color="#FF800A" current="true" isSelected="true">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript>
                <script><![CDATA[// 影片剪辑内第一帧代码 - 使用JSON序列化的版本

// 初始化部分已移到时间轴

// ==================== JSON序列化功能 ====================
// JSON 序列化函数
function JSONStringify(arg) {
    var result = "";
    var temp = undefined;
    var len = undefined;
    var i = undefined;
    
    switch(typeof arg) {
        case "object":
            if (arg) {
                if (arg instanceof Array) {
                    // 处理数组
                    i = 0;
                    while (i < arg.length) {
                        temp = JSONStringify(arg[i]);
                        if (result) {
                            result += ",";
                        }
                        result += temp;
                        i++;
                    }
                    return "[" + result + "]";
                }
                if (typeof arg.toString != "undefined") {
                    // 处理对象
                    for (i in arg) {
                        temp = arg[i];
                        if (typeof temp != "undefined" && typeof temp != "function") {
                            temp = JSONStringify(temp);
                            if (result) {
                                result += ",";
                            }
                            result += JSONStringify(i) + ":" + temp;
                        }
                    }
                    return "{" + result + "}";
                }
            }
            return "null";
        case "number":
            return !isFinite(arg) ? "null" : String(arg);
        case "string":
            len = arg.length;
            result = "\"";
            i = 0;
            while (i < len) {
                var ch = arg.charAt(i);
                if (ch >= " ") {
                    if (ch == "\\" || ch == "\"") {
                        result += "\\";
                    }
                    result += ch;
                } else {
                    switch(ch) {
                        case "\b":
                            result += "\\b";
                            break;
                        case "\f":
                            result += "\\f";
                            break;
                        case "\n":
                            result += "\\n";
                            break;
                        case "\r":
                            result += "\\r";
                            break;
                        case "\t":
                            result += "\\t";
                            break;
                        default:
                            var code = ch.charCodeAt();
                            result += "\\u00" + Math.floor(code / 16).toString(16) + (code % 16).toString(16);
                    }
                }
                i++;
            }
            return result + "\"";
        case "boolean":
            return String(arg);
        default:
            return "null";
    }
}

// JSON 解析器状态变量
var parseText = "";
var parseChar = "";
var parseAt = 0;

// JSON 解析辅助函数
function parseNext() {
    parseChar = parseText.charAt(parseAt);
    parseAt++;
    return parseChar;
}

function parseWhite() {
    while (parseChar) {
        if (parseChar <= " ") {
            parseNext();
        } else if (parseChar != "/") {
            break;
        } else {
            switch(parseNext()) {
                case "/":
                    while (parseNext() && parseChar != "\n" && parseChar != "\r") {
                    }
                    break;
                case "*":
                    parseNext();
                    while (true) {
                        if (parseChar) {
                            if (parseChar == "*") {
                                if (parseNext() == "/") {
                                    break;
                                }
                            } else {
                                parseNext();
                            }
                        } else {
                            throw {name:"JSONError", message:"Unterminated comment"};
                        }
                    }
                    parseNext();
                    continue;
                default:
                    throw {name:"JSONError", message:"Syntax error"};
            }
        }
    }
}

function parseString() {
    var result = "";
    var hex = undefined;
    var i = undefined;
    var uffff = undefined;
    
    if (parseChar == "\"") {
        while (parseNext()) {
            if (parseChar == "\"") {
                parseNext();
                return result;
            }
            if (parseChar == "\\") {
                switch(parseNext()) {
                    case "b":
                        result += "\b";
                        break;
                    case "f":
                        result += "\f";
                        break;
                    case "n":
                        result += "\n";
                        break;
                    case "r":
                        result += "\r";
                        break;
                    case "t":
                        result += "\t";
                        break;
                    case "u":
                        uffff = 0;
                        i = 0;
                        while (i < 4) {
                            hex = parseInt(parseNext(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                            i++;
                        }
                        result += String.fromCharCode(uffff);
                        break;
                    default:
                        result += parseChar;
                }
            } else {
                result += parseChar;
            }
        }
    }
    throw {name:"JSONError", message:"Bad string"};
}

function parseArray() {
    var array = [];
    
    if (parseChar == "[") {
        parseNext();
        parseWhite();
        if (parseChar == "]") {
            parseNext();
            return array;
        }
        while (parseChar) {
            array.push(parseValue());
            parseWhite();
            if (parseChar == "]") {
                parseNext();
                return array;
            }
            if (parseChar != ",") {
                break;
            }
            parseNext();
            parseWhite();
        }
    }
    throw {name:"JSONError", message:"Bad array"};
}

function parseObject() {
    var key = undefined;
    var object = {};
    
    if (parseChar == "{") {
        parseNext();
        parseWhite();
        if (parseChar == "}") {
            parseNext();
            return object;
        }
        while (parseChar) {
            key = parseString();
            parseWhite();
            if (parseChar != ":") {
                break;
            }
            parseNext();
            object[key] = parseValue();
            parseWhite();
            if (parseChar == "}") {
                parseNext();
                return object;
            }
            if (parseChar != ",") {
                break;
            }
            parseNext();
            parseWhite();
        }
    }
    throw {name:"JSONError", message:"Bad object"};
}

function parseNumber() {
    var number = "";
    var result = undefined;
    
    if (parseChar == "-") {
        number = "-";
        parseNext();
    }
    while (parseChar >= "0" && parseChar <= "9") {
        number += parseChar;
        parseNext();
    }
    if (parseChar == ".") {
        number += ".";
        parseNext();
        while (parseChar >= "0" && parseChar <= "9") {
            number += parseChar;
            parseNext();
        }
    }
    if (parseChar == "e" || parseChar == "E") {
        number += parseChar;
        parseNext();
        if (parseChar == "-" || parseChar == "+") {
            number += parseChar;
            parseNext();
        }
        while (parseChar >= "0" && parseChar <= "9") {
            number += parseChar;
            parseNext();
        }
    }
    result = Number(number);
    if (!isFinite(result)) {
        throw {name:"JSONError", message:"Bad number"};
    }
    return result;
}

function parseWord() {
    switch(parseChar) {
        case "t":
            if (parseNext() == "r" && parseNext() == "u" && parseNext() == "e") {
                parseNext();
                return true;
            }
            break;
        case "f":
            if (parseNext() == "a" && parseNext() == "l" && parseNext() == "s" && parseNext() == "e") {
                parseNext();
                return false;
            }
            break;
        case "n":
            if (parseNext() == "u" && parseNext() == "l" && parseNext() == "l") {
                parseNext();
                return null;
            }
            break;
    }
    throw {name:"JSONError", message:"Syntax error"};
}

function parseValue() {
    parseWhite();
    switch(parseChar) {
        case "{":
            return parseObject();
        case "[":
            return parseArray();
        case "\"":
            return parseString();
        case "-":
            return parseNumber();
        default:
            return (parseChar >= "0" && parseChar <= "9") ? parseNumber() : parseWord();
    }
}

function JSONParse(text) {
    parseText = text;
    parseAt = 0;
    parseChar = " ";
    return parseValue();
}

// ==================== 存档序列化功能函数 ====================
// 序列化存档数据为字符串
function serializeSaveData(saveData) {
    if (!saveData) return null;
    
    try {
        // 创建包含版本信息和数据的对象
        var wrapperObject = {
            version: "CRAZYFLASHER7_SAVE_V1",
            timestamp: new Date().getTime(),
            gameData: saveData
        };
        
        return JSONStringify(wrapperObject);
    } catch (e) {
        trace("序列化失败: " + e.toString());
        return null;
    }
}

// 反序列化字符串为存档数据
this.deserializeSaveData = function(serializedStr) {
    trace("开始反序列化，输入长度: " + (serializedStr ? serializedStr.length : "null"));
    
    if (!serializedStr || serializedStr.length < 10) {
        trace("输入数据为空或过短");
        return null;
    }
    
    try {
        var wrapperObject = JSONParse(serializedStr);
        
        if (!wrapperObject || wrapperObject.version != "CRAZYFLASHER7_SAVE_V1") {
            trace("存档格式版本不匹配");
            trace("解析结果: " + (wrapperObject ? "有对象，版本:" + wrapperObject.version : "null"));
            return null;
        }
        
        trace("反序列化成功");
        return wrapperObject.gameData;
    } catch (e) {
        var errorMsg = "未知错误";
        if (e && e.message) {
            errorMsg = e.message;
        } else if (typeof e == "string") {
            errorMsg = e;
        }
        trace("json反序列化失败: " + errorMsg);
        trace("输入数据: " + serializedStr);
        return null;
    }
}

// 导出当前存档
function exportCurrentSave() {
    var mysave = SharedObject.getLocal(currentSavePath);
    if (mysave.data && mysave.data["test"]) {
        var serialized = serializeSaveData(mysave.data["test"]);
        _root.exportedSaveString = serialized; // 挂载到root变量
        trace("存档已导出到 _root.exportedSaveString");
        return serialized;
    } else {
        _root.exportedSaveString = "";
        trace("当前存档位没有数据");
        return null;
    }
}


// ==================== 原有事件处理函数 ====================
this.onRollOver = function() {
    this.isHover = true;
};

this.onRollOut = function() {
    this.isHover = false;
};

// 修改后的点击事件 - 添加序列化功能
this.onPress = function() {
    // 更新全局存档路径
    _root.savePath = this.currentSavePath;
    
    // 取消其他存档位的选中状态
    for (var i = 0; i < 10; i++) {
        var otherSlot = _root["存档位" + i];
        if (otherSlot && otherSlot != this) {
            otherSlot.isSelected = false;
        }
    }
    
    // 设置当前存档位为选中状态
    this.isSelected = true;
    
    // 自动导出当前选中的存档
    this.exportCurrentSave();
    
    trace("已选择存档路径: " + this.currentSavePath);
};

// ==================== 原有每帧更新函数 ====================
this.onEnterFrame = function() {
	if(!this.slotName){
		delete this.onEnterFrame;
		return;
	}
    this.focus._visible = this.isHover || (this.currentSavePath === _root.savePath); 
    this.name = this._name + " :";
    
    if (this.currentSavePath != this.savePath) {
        this.savePath = this.currentSavePath;
        trace("savePath: " + this.savePath);
        
        存盘名 = "test";
        var mysave = SharedObject.getLocal(this.savePath);
        
        if (mysave.data && mysave.data[存盘名]) {
            var saveData = mysave.data[存盘名];
            
            if (saveData[0]) {
                var 角色名 = saveData[0][0];
                var 等级 = saveData[0][3];
                var 金钱 = saveData[0][2];
            }
            
            var 主线进度 = saveData[3];
            
            if (角色名 != undefined) {
                this.角色信息文本 = "<font color='#00ff00'>lv." + 等级 + "</font> " + 
                                "<font color='#ffd700'>" + 角色名 + "</font>";
            }
			
			if (saveData.version != null) {
                this.版本文本 = saveData.version + "+";
            }else{
				this.版本文本 = "未知版本";
			}
            
            if (主线进度 != undefined) {
                var 难度 = saveData[0][11];
                var 难度文本 = ["平衡模式（困难）", "逆天模式（简单）", "挑战模式（自限）"];
                this.主线进度文本 = 主线进度 + "   " + 难度文本[难度];
            }
            
            var lastSaved:String = saveData.lastSaved || null;
            this.lastSaved = lastSaved;
            
            trace("角色名: " + 角色名);
            trace("等级: " + 等级);
            trace("主线进度: " + 主线进度);
        } else {
            this.角色信息文本 = "暂无存档";
			this.版本文本 = "";
            this.主线进度文本 = "";
            this.lastSaved = "";
            trace("没有找到存档数据");
        }
    }
};]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="图层 5" color="#4FFFFF">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="图层 2" color="#9933CC">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMStaticText width="51.1" height="15.55" autoExpand="true" isSelectable="false">
                  <matrix>
                    <Matrix tx="3.55" ty="25.25"/>
                  </matrix>
                  <textRuns>
                    <DOMTextRun>
                      <characters>存档版本</characters>
                      <textAttrs>
                        <DOMTextAttrs aliasText="false" bitmapSize="240" face="MicrosoftYaHei" fillColor="#FFFFFF"/>
                      </textAttrs>
                    </DOMTextRun>
                    <DOMTextRun>
                      <characters>:</characters>
                      <textAttrs>
                        <DOMTextAttrs aliasText="false" bitmapSize="240" face="MicrosoftYaHei" fillColor="#FFFFFF"/>
                      </textAttrs>
                    </DOMTextRun>
                  </textRuns>
                </DOMStaticText>
                <DOMDynamicText fontRenderingMode="device" width="56.3" height="15.55" isSelectable="false" variableName="name" lineType="multiline">
                  <matrix>
                    <Matrix tx="2.55" ty="5"/>
                  </matrix>
                  <textRuns>
                    <DOMTextRun>
                      <characters>test</characters>
                      <textAttrs>
                        <DOMTextAttrs alignment="center" aliasText="false" bitmapSize="240" face="MicrosoftYaHei" fillColor="#FFE066"/>
                      </textAttrs>
                    </DOMTextRun>
                  </textRuns>
                </DOMDynamicText>
                <DOMDynamicText fontRenderingMode="device" width="157.35" height="15.55" isSelectable="false" variableName="角色信息文本" renderAsHTML="true">
                  <matrix>
                    <Matrix tx="67.95" ty="5.2"/>
                  </matrix>
                  <textRuns>
                    <DOMTextRun>
                      <characters>player    lv.60</characters>
                      <textAttrs>
                        <DOMTextAttrs aliasText="false" bitmapSize="240" face="MicrosoftYaHei" fillColor="#AAAAAA"/>
                      </textAttrs>
                    </DOMTextRun>
                  </textRuns>
                </DOMDynamicText>
                <DOMDynamicText fontRenderingMode="device" width="102.5" height="15.55" isSelectable="false" variableName="版本文本" lineType="multiline">
                  <matrix>
                    <Matrix tx="68.05" ty="25.95"/>
                  </matrix>
                  <textRuns>
                    <DOMTextRun>
                      <characters>2.x+</characters>
                      <textAttrs>
                        <DOMTextAttrs aliasText="false" bitmapSize="240" face="MicrosoftYaHei" fillColor="#AAAAAA"/>
                      </textAttrs>
                    </DOMTextRun>
                  </textRuns>
                </DOMDynamicText>
                <DOMStaticText width="61.2" height="15.55" isSelectable="false">
                  <matrix>
                    <Matrix tx="2.8" ty="65.4"/>
                  </matrix>
                  <textRuns>
                    <DOMTextRun>
                      <characters>保存时间</characters>
                      <textAttrs>
                        <DOMTextAttrs aliasText="false" bitmapSize="240" face="MicrosoftYaHei" fillColor="#FFFFFF"/>
                      </textAttrs>
                    </DOMTextRun>
                    <DOMTextRun>
                      <characters>:</characters>
                      <textAttrs>
                        <DOMTextAttrs aliasText="false" bitmapSize="240" face="MicrosoftYaHei" fillColor="#FFFFFF"/>
                      </textAttrs>
                    </DOMTextRun>
                  </textRuns>
                </DOMStaticText>
                <DOMDynamicText fontRenderingMode="device" width="130.05" height="15.55" isSelectable="false" variableName="lastSaved">
                  <matrix>
                    <Matrix tx="68" ty="66.9"/>
                  </matrix>
                  <textRuns>
                    <DOMTextRun>
                      <characters>2012-12-21 23:59:59</characters>
                      <textAttrs>
                        <DOMTextAttrs aliasText="false" indent="0.5" size="11" bitmapSize="220" face="MicrosoftYaHei" fillColor="#AAAAAA"/>
                      </textAttrs>
                    </DOMTextRun>
                  </textRuns>
                </DOMDynamicText>
                <DOMStaticText width="51.1" height="15.55" autoExpand="true" isSelectable="false">
                  <matrix>
                    <Matrix tx="3.55" ty="45.25"/>
                  </matrix>
                  <textRuns>
                    <DOMTextRun>
                      <characters>主线进度</characters>
                      <textAttrs>
                        <DOMTextAttrs aliasText="false" bitmapSize="240" face="MicrosoftYaHei" fillColor="#FFFFFF"/>
                      </textAttrs>
                    </DOMTextRun>
                    <DOMTextRun>
                      <characters>:</characters>
                      <textAttrs>
                        <DOMTextAttrs aliasText="false" bitmapSize="240" face="MicrosoftYaHei" fillColor="#FFFFFF"/>
                      </textAttrs>
                    </DOMTextRun>
                    <DOMTextRun>
                      <characters></characters>
                      <textAttrs>
                        <DOMTextAttrs aliasText="false" bitmapSize="240" face="MicrosoftYaHei" fillColor="#FFFFFF"/>
                      </textAttrs>
                    </DOMTextRun>
                  </textRuns>
                </DOMStaticText>
                <DOMDynamicText fontRenderingMode="device" width="170.3" height="15.55" isSelectable="false" variableName="主线进度文本" lineType="multiline">
                  <matrix>
                    <Matrix tx="68.05" ty="46.45"/>
                  </matrix>
                  <textRuns>
                    <DOMTextRun>
                      <characters>???</characters>
                      <textAttrs>
                        <DOMTextAttrs aliasText="false" bitmapSize="240" face="MicrosoftYaHei" fillColor="#AAAAAA"/>
                      </textAttrs>
                    </DOMTextRun>
                  </textRuns>
                </DOMDynamicText>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="图层 1" color="#4FFF4F">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="sprite/Symbol 246" centerPoint3DX="298.7" centerPoint3DY="137.5">
                  <matrix>
                    <Matrix a="0" b="0.216659545898438" c="-1.0394287109375" d="0" tx="97.7" ty="43.55"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <filters>
                    <BlurFilter quality="3"/>
                  </filters>
                  <color>
                    <Color alphaMultiplier="0.48046875"/>
                  </color>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName="sprite/Symbol 246" centerPoint3DX="230.15" centerPoint3DY="137.5">
                  <matrix>
                    <Matrix a="0" b="0.216659545898438" c="-0.314773559570313" d="0" tx="29.15" ty="43.55"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <filters>
                    <BlurFilter quality="3"/>
                  </filters>
                  <color>
                    <Color alphaMultiplier="0.66015625"/>
                  </color>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName="sprite/Symbol 246" centerPoint3DX="329.1" centerPoint3DY="137.5">
                  <matrix>
                    <Matrix a="0" b="0.216659545898438" c="-0.666854858398438" d="0" tx="128.1" ty="43.55"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <filters>
                    <BlurFilter quality="3"/>
                  </filters>
                  <color>
                    <Color alphaMultiplier="0.328125"/>
                  </color>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="focus" color="#FF4FFF" autoNamed="false" visible="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="sprite/Symbol 246" name="focus" centerPoint3DX="298.7" centerPoint3DY="137.5">
                  <matrix>
                    <Matrix a="0" b="0.216659545898438" c="-1.0394287109375" d="0" tx="97.7" ty="43.55"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <filters>
                    <GlowFilter blurX="14" blurY="14" color="#FFFFFF" quality="3"/>
                  </filters>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>