<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="吉他喷火/吉他喷火器" itemID="65545fde-000049c4" linkageExportForAS="true" linkageIdentifier="枪-长枪-吉他喷火器" lastModified="1732287965" lastUniqueIdentifier="19">
  <timeline>
    <DOMTimeline name="吉他喷火器" guides='&lt;guidelines&gt;&lt;guideline direction="h"&gt;48&lt;/guideline&gt;&lt;/guidelines&gt;'>
      <layers>
        <DOMLayer name="图层 3" color="#FF800A" outline="true" useOutlineView="true">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="未命名文件夹 1/sprite 10" name="刀口位置1" centerPoint3DX="10.5" centerPoint3DY="333.65">
                  <matrix>
                    <Matrix a="0.692108154296875" d="1.2939453125" tx="2.3" ty="315.2"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 耗蓝比例 = 5;
	var 自机 = _root.获得父节点(this, 5);
	var 吉他震地时间戳名 = 自机.长枪 + "吉他震地" + "时间戳";
	var 吉他震地时间间隔 = 1 * 1000;
	var 吉他震地耗蓝量 = Math.floor(自机.mp满血值 / 100 * 耗蓝比例);
	var 战技时间戳名 = 自机.长枪 + "战技" + "时间戳";
	var 战技时间间隔 = 5 * 1000;
	var 战技mp消耗 = 30;

	this.检查并执行时间间隔动作 = _root.检查并执行时间间隔动作;
	this.释放战技 = function()
	{
		自机.技能名 = "凶斩";
		自机.技能等级 = Math.min(10, _root.获得强化等级(_root.长枪));
		自机.mp -= 战技mp消耗;
		自机.状态改变("技能");
	};
	this.释放吉他震地 = function()
	{
		var myPoint = {x:自机._x, y:自机._y};
		声音 = "";
		霰弹值 = 1;
		子弹散射度 = 0;
		发射效果 = "";
		子弹种类 = "吉他震地";
		子弹威力 = 吉他震地耗蓝量 * 45;
		子弹速度 = 0;
		击中地图效果 = "";
		Z轴攻击范围 = 200;
		击倒率 = 1;
		击中后子弹的效果 = "";
		子弹敌我属性 = true;
		发射者名 = 自机._name;
		子弹敌我属性值 = !自机.是否为敌人;
		shootX = myPoint.x;
		Z轴坐标 = shootY = 自机._y;
		_root.子弹区域shoot(声音,霰弹值,子弹散射度,发射效果,子弹种类,子弹威力,子弹速度,Z轴攻击范围,击中地图效果,发射者名,shootX,shootY,Z轴坐标,子弹敌我属性值,击倒率,击中后子弹的效果);
		自机.mp -= 吉他震地耗蓝量;
	};
	this.onEnterFrame = function()
	{
		if (自机.刀 == 自机.长枪 and (自机.攻击模式 == "长枪" or 自机.攻击模式 == "兵器"))
		{
			if (Key.isDown(_root.武器技能键) and 自机.mp >= 战技mp消耗)
			{
				this.检查并执行时间间隔动作(自机,战技时间间隔,"释放战技",战技时间戳名);
			}
			if (自机.man._currentframe >= 347 and 自机.man._currentframe <= 369 and 自机.mp >= 吉他震地耗蓝量)
			{//凶斩判定
				this.检查并执行时间间隔动作(自机,吉他震地时间间隔,"释放吉他震地",吉他震地时间戳名);
			}
		}
	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName="未命名文件夹 1/sprite 10" name="刀口位置2" centerPoint3DX="10.25" centerPoint3DY="56.9">
                  <matrix>
                    <Matrix a="0.692108154296875" d="1.2939453125" tx="2.3" ty="39.25"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName="未命名文件夹 1/sprite 10" name="刀口位置3" centerPoint3DX="8.25" centerPoint3DY="192.6">
                  <matrix>
                    <Matrix a="0.692108154296875" d="1.2939453125" ty="174.6"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 耗蓝比例 = 1;
	var 坐标偏移范围 = 10;
	var 自机 = _root.获得父节点(this, 5);
	var 是否为刀形态 = _root.获得父节点(this, 2)._name == "刀";
	if (自机[增幅次数] == undefined)
	{
		自机[增幅次数] = {};
	}
	this.获得随机时间间隔 = function()
	{
		return _root.随机整数(0, 1 * 1000);
	};
	this.检查并执行时间间隔动作 = _root.检查并执行时间间隔动作;
	this.获得随机坐标偏离 = function()
	{
		var xOffset = (_root.basic_random() - 0.5) * 2 * 坐标偏移范围;
		var yOffset = (_root.basic_random() - 0.5) * 2 * 坐标偏移范围;
		return {x:自机._x + xOffset, y:自机._y + yOffset};
	};

	var 黄色音符标识 = 自机.刀 + "黄色音符";
	var 黄色音符时间戳名 = 黄色音符标识 + "时间戳";
	var 黄色音符时间间隔 = this.获得随机时间间隔();
	var 黄色音符耗蓝量 = Math.floor(自机.mp满血值 / 100 * 耗蓝比例);
	var 黄色音符最大增幅次数 = 24;
	var 黄色音符攻击力增幅百分比 = 2.5;
	this.释放黄色音符 = function()
	{
		var myPoint = this.获得随机坐标偏离();
		var 增幅名 = 黄色音符标识 + "攻击增幅";

		if (自机[增幅次数][增幅名] === undefined)
		{
			自机[增幅次数][增幅名] = 1;
		}
		if (自机[增幅次数][增幅名] <= 黄色音符最大增幅次数)
		{
			自机.空手攻击力 *= (100 + 黄色音符攻击力增幅百分比) / 100;
			_root.发布消息("攻击力第" + 自机[增幅次数][增幅名] + "次上升" + 黄色音符攻击力增幅百分比 + "%！目前攻击力为" + Math.floor(自机.空手攻击力) + "点！");
			自机[增幅次数][增幅名] += 1;
		}
		声音 = "";
		霰弹值 = 1;
		子弹散射度 = 360;
		发射效果 = "";
		子弹种类 = "黄色音符";
		子弹威力 = 黄色音符耗蓝量 * 10;
		子弹速度 = 3;
		击中地图效果 = "";
		Z轴攻击范围 = 20;
		击倒率 = 100;
		击中后子弹的效果 = "";
		子弹敌我属性 = true;
		发射者名 = 自机._name;
		子弹敌我属性值 = !自机.是否为敌人;
		shootX = myPoint.x;
		Z轴坐标 = shootY = 自机._y;
		_root.子弹区域shoot(声音,霰弹值,子弹散射度,发射效果,子弹种类,子弹威力,子弹速度,Z轴攻击范围,击中地图效果,发射者名,shootX,shootY,Z轴坐标,子弹敌我属性值,击倒率,击中后子弹的效果);
		自机.mp -= 黄色音符耗蓝量;
		黄色音符时间间隔 = this.获得随机时间间隔();
	};

	var 灯光增幅标识 = 自机.刀 + "灯光增幅";
	var 灯光增幅时间戳名 = 灯光增幅标识 + "时间戳";
	var 灯光增幅时间间隔 = this.获得随机时间间隔() * 3;
	var 灯光增幅耗蓝量 = Math.floor(自机.mp满血值 / 100 * 耗蓝比例);
	var 灯光增幅最大增幅次数 = 24;
	var 灯光增幅攻击力增幅百分比 = 2.5;
	this.释放灯光增幅 = function()
	{
		var myPoint = this.获得随机坐标偏离();
		var 增幅名 = 灯光增幅标识 + "攻击增幅";

		if (自机[增幅次数][增幅名] === undefined)
		{
			自机[增幅次数][增幅名] = 1;
		}
		if (自机[增幅次数][增幅名] <= 灯光增幅最大增幅次数)
		{
			自机.空手攻击力 *= (100 + 灯光增幅攻击力增幅百分比) / 100;
			_root.发布消息("防御力第" + 自机[增幅次数][增幅名] + "次上升" + 灯光增幅攻击力增幅百分比 + "%！目前防御力为" + Math.floor(自机.防御力) + "点！");
			自机[增幅次数][增幅名] += 1;
		}
		声音 = "";
		霰弹值 = 1;
		子弹散射度 = 360;
		发射效果 = "";
		子弹种类 = "灯光增幅";
		子弹威力 = 灯光增幅耗蓝量 * 30;
		子弹速度 = 0;
		击中地图效果 = "";
		Z轴攻击范围 = 50;
		击倒率 = 1;
		击中后子弹的效果 = "";
		子弹敌我属性 = true;
		发射者名 = 自机._name;
		子弹敌我属性值 = !自机.是否为敌人;
		shootX = myPoint.x;
		Z轴坐标 = shootY = 自机._y;
		_root.子弹区域shoot(声音,霰弹值,子弹散射度,发射效果,子弹种类,子弹威力,子弹速度,Z轴攻击范围,击中地图效果,发射者名,shootX,shootY,Z轴坐标,子弹敌我属性值,击倒率,击中后子弹的效果);
		自机.mp -= 灯光增幅耗蓝量;
		灯光增幅时间间隔 = this.获得随机时间间隔() * 3;
	};
	this.onEnterFrame = function()
	{
		if (_root.兵器攻击检测(自机) and 自机.mp >= 黄色音符耗蓝量 and 是否为刀形态)
		{
			if (自机.mp >= 黄色音符耗蓝量)
			{
				this.检查并执行时间间隔动作(自机,黄色音符时间间隔,"释放黄色音符",黄色音符时间戳名);
			}
			if (自机.mp >= 灯光增幅耗蓝量)
			{
				this.检查并执行时间间隔动作(自机,灯光增幅时间间隔,"释放灯光增幅",灯光增幅时间戳名);
			}
		}
	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="图层 2" color="#9933CC" outline="true" useOutlineView="true">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="长枪/火药燃气液压打桩机/未命名文件夹 1/sprite 10" name="枪口位置" centerPoint3DX="94.5" centerPoint3DY="13.4">
                  <matrix>
                    <Matrix tx="82" ty="0.9"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 自机 = _root.获得父节点(this, 5);
	var 武器类型名 = "武器类型:" + 自机.长枪;
	this.动态调整位置 = function()
	{//保证机枪形态枪口焰视觉正常
		if (自机[武器类型名] == "喷火器")
		{
			this._x = 82;
		}
		else
		{
			this._x = 282;
		}
	};
	this.动态调整位置();
	this.onEnterFrame = function()
	{
		this.动态调整位置();
	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="图层 1" color="#4FFF4F" current="true" isSelected="true">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="吉他喷火/吉他喷火器动画" name="动画" selected="true" centerPoint3DX="-161.45" centerPoint3DY="317.25">
                  <matrix>
                    <Matrix a="-4.5340576171875" d="-4.5340576171875" tx="339.3" ty="374.45"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="110.45" y="12.65"/>
                  </transformationPoint>
                  <Actionscript>
                    <script><![CDATA[onClipEvent (load) {
	var 自机 = _root.获得父节点(this, 5);
	var 自机类型 = _root.获得父节点(this, 2)._name;
	var 时间戳名 = 自机.长枪 + "时间戳";
	var 动画帧名 = 自机.长枪 + "动画帧";
	var 变形计数 = 自机.长枪 + "变形计数";
	var 武器类型名 = "武器类型:" + 自机.长枪;
	var 基础属性名 = "基础属性:" + 自机.长枪;
	var 机枪动画帧上限 = 13;
	var 机枪弹容倍率 = 3;
	var 机枪弹容上限 = 48;
	var 机枪剩余弹容 = 自机.长枪 + "机枪剩余弹容";
	var 机枪弹容指示器格数 = 5;
	this.切换为喷火器 = function()
	{
		自机[武器类型名] = "喷火器";
		自机.长枪属性.impact = 自机[基础属性名].基础击倒力;
		//自机.长枪属性.power = 自机[基础属性名].基础伤害;
		自机.buff.基础值.长枪威力 = 自机.手枪.getData().data.power * 1 + 自机.装备枪械威力加成;
		自机.buff.更新("长枪威力");
		自机.长枪属性.bullethit = 自机[基础属性名].基础命中效果;
		自机.长枪属性.muzzle = 自机[基础属性名].基础枪口焰;
		自机.长枪属性.sound = 自机[基础属性名].基础音效;
		自机.长枪属性.bullet = 自机[基础属性名].基础子弹;
		自机.长枪属性.velocity = 自机[基础属性名].基础速度;
		自机.长枪属性.interval = 自机[基础属性名].基础射击间隔;
		自机.长枪属性.diffusion = 自机[基础属性名].基础散射度;
		自机.长枪属性.split = 自机[基础属性名].基础霰弹值;
		自机.长枪属性.capacity = 自机[基础属性名].基础弹容;
		自机.长枪弹匣容量 = 自机.长枪属性.capacity;
		自机.长枪.value.shot = Math.floor(自机.长枪.value.shot / 机枪弹容倍率);
		自机.man.初始化长枪射击函数();
	};
	this.切换为机枪 = function()
	{
		自机[武器类型名] = "机枪";
		自机.长枪属性.impact = 15;
		//自机.长枪属性.power = 自机[基础属性名].基础伤害 / 2;
		自机.buff.基础值.长枪威力 = 自机.手枪.getData().data.power * 0.5 + 自机.装备枪械威力加成;
		自机.buff.更新("长枪威力");
		自机.长枪属性.bullethit = "火花";
		自机.长枪属性.muzzle = "枪火";
		自机.长枪属性.sound = "p90-1.wav";
		自机.长枪属性.bullet = "加强普通子弹";
		自机.长枪属性.velocity = 自机[基础属性名].基础速度 * 6;
		自机.长枪属性.interval = Math.floor(自机[基础属性名].基础射击间隔 / 2);
		自机.长枪属性.diffusion = Math.floor(自机[基础属性名].基础散射度 / 1.5);
		自机.长枪属性.split = 自机[基础属性名].基础霰弹值 * 2;
		自机.长枪属性.capacity = 自机[基础属性名].基础弹容 * 机枪弹容倍率;
		自机.长枪弹匣容量 = 自机.长枪属性.capacity;
		自机.长枪.value.shot = 自机.长枪.value.shot * 机枪弹容倍率;
		自机.man.初始化长枪射击函数();
	};
	this.保存武装类型 = function()
	{
		if (_root.控制目标 == 自机._name)
		{
			_root[武器类型名] = 自机[武器类型名];//_root.发布调试消息(_root[武器类型名] + " " + 自机[武器类型名]);
		}
	};

	this.读取武装类型 = function()
	{
		if (_root.控制目标 == 自机._name and _root[武器类型名] == "机枪")
		{
			this.切换为机枪();
			自机.长枪.value.shot = 自机[基础属性名].基础弹容 - Math.floor((自机[基础属性名].基础弹容 * 机枪弹容倍率 - 自机.长枪.value.shot) / 机枪弹容倍率);//保证切换场景后子弹数量正常
			改变武器类型许可 = true;
			自机[动画帧名] = 机枪动画帧上限;
			改变武器类型计数 = 0;
			//_root.发布调试消息(_root[武器类型名] + " " + 自机[武器类型名]);
		}
	};
	//_root.调试模式 = true;
	if (自机[基础属性名] == undefined)
	{//初始化吉他数据
		自机[基础属性名] = {};
		自机[基础属性名].基础击倒力 = 自机.长枪属性.impact;
		自机[基础属性名].基础伤害 = 自机.长枪属性.power;
		// _root.发布消息(自机[基础属性名].基础伤害);
		自机[基础属性名].基础命中效果 = 自机.长枪属性.bullethit;
		自机[基础属性名].基础枪口焰 = 自机.长枪属性.muzzle;
		自机[基础属性名].基础音效 = 自机.长枪属性.sound;
		自机[基础属性名].基础子弹 = 自机.长枪属性.bullet;
		自机[基础属性名].基础速度 = 自机.长枪属性.velocity;
		自机[基础属性名].基础射击间隔 = 自机.长枪属性.interval;
		自机[基础属性名].基础散射度 = 自机.长枪属性.diffusion;
		自机[基础属性名].基础霰弹值 = 自机.长枪属性.split;
		自机[基础属性名].基础弹容 = 自机.长枪属性.capacity;

		自机[武器类型名] = "喷火器";
		this.读取武装类型();

		if (自机.刀 == null)
		{
			_root.刀配置(自机._name,"桔色电子吉他" + "",1);//借用配置生成因此不需要考虑强化数值
			自机.刀 = 自机.长枪;
			自机.刀_装扮 = 自机.长枪_装扮;
			自机.刀属性.power = 自机[基础属性名].基础伤害 * 130 / 120;//刀模式伤害调整
			//_root.发布调试消息(自机.刀 + " " + 自机.刀属性.power);
		}
	}

	this.获得动画时长 = function()
	{
		return (自机[武器类型名] == "喷火器") ? 15 : 机枪动画帧上限;//机枪模式不显示燃料罐
	};
	var 动画时长 = this.获得动画时长();
	var 改变武器类型动画时长 = 5;
	var 刀形态角度偏移 = 90;
	var 刀形态x偏移 = 380;
	var 刀形态y偏移 = -180;
	var 改变武器类型许可 = false;
	var 改变武器类型计数 = -1;
	var 变形时间间隔 = 1 * 1000;

	this.切换武器形态 = function()
	{
		(自机[武器类型名] == "喷火器") ? this.切换为机枪() : this.切换为喷火器();
		_root.控制目标 == 自机._name ? _root.玩家必要信息界面.子弹数 = 自机.长枪属性.capacity - 自机.长枪.value.shot : 0;//自机控制时刷新显示
		if (自机.主手射击中 == true)
		{
			自机.攻击模式切换("长枪");
		}
	};
	this.判断是否展开 = function()
	{
		return 自机.攻击模式 == "长枪" and !(自机.刀 == 自机.长枪 and (自机.攻击模式 == "兵器" or _root.兵器使用检测(自机)));
	};
	this.展开动画 = function()
	{
		//_root.发布调试消息(自机[武器类型名] + this.获得动画时长());
		if (自机[动画帧名] < this.获得动画时长())
		{
			自机[动画帧名] += 1;
		}
	};
	this.折叠动画 = function()
	{
		if (自机[动画帧名] > 1)
		{
			自机[动画帧名] -= 1;
		}
	};
	this.是否隐藏枪 = function()
	{
		return 自机.刀 == 自机.长枪 and (自机.攻击模式 == "兵器" or _root.兵器使用检测(自机));
	};

	this.是否显示刀 = function()
	{
		//_root.发布调试消息(自机.攻击模式 + _root.兵器使用检测(自机) + (自机.攻击模式 == "兵器") + (自机.攻击模式 == "兵器" or _root.兵器使用检测(自机)));
		return (自机.攻击模式 == "兵器" || _root.兵器使用检测(自机));
	};
	this.刀枪隐藏显示 = function()
	{
		if (自机类型 == "枪")
		{
			this._visible = !this.是否隐藏枪();
		}
		else
		{
			this._visible = this.是否显示刀();
			if (this._visible)
			{//利用可见度中介，减少一次函数调用
				this._rotation = 刀形态角度偏移;
				this._x = 刀形态x偏移;
				this._y = 刀形态y偏移;
			}
		}
	};
	this.刀枪隐藏显示();



	if (自机[动画帧名] == undefined)
	{
		自机[动画帧名] = 1;
	}
	if (自机[机枪剩余弹容] == undefined)
	{
		自机[机枪剩余弹容] = 机枪弹容上限;
	}

	this.机枪弹容指示器显示 = function()
	{
		var 显示基数 = 机枪弹容上限 / 机枪弹容指示器格数;
		var 显示格数 = 1;
		if (自机[机枪剩余弹容] > 0)
		{
			显示格数 += Math.ceil((机枪弹容上限 - 自机[机枪剩余弹容]) / 显示基数);
		}
		//_root.发布调试消息(自机[机枪剩余弹容] + " " + 显示格数);     
		this.机枪弹容指示器.gotoAndStop(显示格数);
	};

	this.刷新机枪指示器弹容 = function()
	{
		if (自机[武器类型名] == "机枪" and 自机.攻击模式 == "长枪" and 自机.主手射击中 == true)
		{
			自机[机枪剩余弹容] -= 1;
		}
		else if (自机[机枪剩余弹容] < 机枪弹容上限)
		{
			自机[机枪剩余弹容] += 1;
		}
		this.机枪弹容指示器显示();
	};
	gotoAndStop(自机[动画帧名]);
	this.刷新机枪指示器弹容();
	this.onEnterFrame = function()
	{
		自机类型 = _root.获得父节点(this, 2)._name;
		//_root.发布调试消息(1+自机类型+1);
		this.刀枪隐藏显示();
		this.刷新机枪指示器弹容();
		//_root.发布调试消息("是否有刀" + (自机.刀 == 自机.长枪) + " 是否用刀 " + (自机.攻击模式 == "兵器" or _root.兵器使用检测(自机)) + " 是否持械 " + (自机.攻击模式 == "兵器") + " 是否砍人 " + _root.兵器使用检测(自机));
		//_root.发布调试消息(自机.攻击模式 + _root.兵器使用检测(自机));
		//_root.发布调试消息(自机.攻击模式 + " 枪 动画许可:" + 枪形态动画许可 + " 刀 动画许可:" + 刀形态动画许可 + 自机类型 + " 可见:" + this._visible);  
		var 机枪过热:Boolean = false;
		if (自机[机枪剩余弹容] == 0 and 自机[武器类型名] == "机枪" and (自机[基础属性名].基础弹容 * 机枪弹容倍率 - 自机.长枪.value.shot) > 5)
		{
			机枪过热 = true;
			_root.发布消息("机枪形态过热，自动切换形态！");
		}
		if (Key.isDown(_root.武器变形键) and (自机[武器类型名] == "机枪" or 自机[武器类型名] == "喷火器") and !改变武器类型许可 and 自机.攻击模式 == "长枪" and 自机类型 == "枪" or 机枪过热)
		{
			改变武器类型许可 = true;
			自机[动画帧名] = 机枪动画帧上限;
			改变武器类型计数 = 0;
			this.切换武器形态();
			_root.发布消息("吉他武器类型切换为[" + 自机[武器类型名] + "]");
			this.保存武装类型();

		}

		if (改变武器类型许可 || 改变武器类型计数 >= 0)
		{
			if (改变武器类型计数 < 改变武器类型动画时长 * 2)
			{
				++改变武器类型计数;
				this[改变武器类型计数 - 改变武器类型动画时长 > 0 ? '展开动画' : '折叠动画']();
			}
			else
			{
				改变武器类型许可 = false;
				改变武器类型计数 = -1;
			}
		}
		else
		{
			this[this.判断是否展开() ? '展开动画' : '折叠动画']();
		}
		gotoAndStop(自机[动画帧名]);
	};
}]]></script>
                  </Actionscript>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>