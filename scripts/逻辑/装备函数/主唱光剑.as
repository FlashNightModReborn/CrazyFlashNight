import org.flashNight.neur.Event.*;

_root.装备生命周期函数.主唱光剑初始化 = function(反射对象, 参数对象) 
{
    var 自机 = 反射对象.自机;
    
    // 初始化武器形态系统
    var 武器类型名 = "武器类型名" + 自机.刀;
    var 动画帧名 = 自机.刀 + "动画帧";
    
    // 初始化基础伤害
    if (isNaN(自机.话筒支架基础伤害)) {
        自机.话筒支架基础伤害 = 自机.刀属性.power;
        自机[武器类型名] = "光剑";
        
        // 读取保存的武器类型
        if (_root.控制目标 == 自机._name && _root[武器类型名] == "话筒支架") {
            自机[武器类型名] = "话筒支架";
            自机.刀属性.power = 自机.话筒支架基础伤害 * 0.8;
        }
    }
    
    // 初始化动画系统
    if (自机[动画帧名] == undefined) {
        自机[动画帧名] = 1;
    }
    反射对象.动画时长 = 15;
    反射对象.当前帧 = 自机[动画帧名];
    
    // 初始化增幅系统
    if (自机["增幅次数"] == undefined) {
        自机["增幅次数"] = {};
    }
    
    // 初始化主唱光刃系统
    if (自机.上次主唱光刃类型 == undefined) {
        自机.上次主唱光刃类型 = "主唱光刃突刺";
    }
    
    // 初始化耗蓝比例
    反射对象.耗蓝比例 = 参数对象.mpRatio ? 参数对象.mpRatio : 1;
    反射对象.坐标偏移范围 = 参数对象.offsetRange ? 参数对象.offsetRange : 10;
    
    // 保存到反射对象中方便访问
    反射对象.武器类型名 = 武器类型名;
    反射对象.动画帧名 = 动画帧名;
};

_root.装备生命周期函数.主唱光剑形态切换周期 = function(反射对象, 参数对象)
{
    _root.装备生命周期函数.移除异常周期函数(反射对象);
    var 自机 = 反射对象.自机;
    var 刀 = 自机.刀_引用;
    
    // 武器形态切换检测
    var 变形时间间隔 = 1000;
    var 时间戳名 = 自机.刀 + "形态切换时间戳";
    
    if (Key.isDown(_root.武器变形键) && 自机.攻击模式 == "兵器") {
        if (!自机[时间戳名] || getTimer() - 自机[时间戳名] > 变形时间间隔) {
            自机[时间戳名] = getTimer();
            
            // 切换武器形态
            if (自机[反射对象.武器类型名] == "光剑") {
                自机[反射对象.武器类型名] = "话筒支架";
                自机.刀属性.power = 自机.话筒支架基础伤害 * 0.8;
            } else {
                自机[反射对象.武器类型名] = "光剑";
                自机.刀属性.power = 自机.话筒支架基础伤害;
            }
            
            _root.发布消息("话筒支架武器类型切换为[" + 自机[反射对象.武器类型名] + "]");
            
            // 保存武器类型到全局
            if (_root.控制目标 == 自机._name) {
                _root[反射对象.武器类型名] = 自机[反射对象.武器类型名];
            }
        }
    }
    
    // 动画控制
    var 判断是否展开 = function() {
        if (!_root.兵器使用检测(自机) && 自机.攻击模式 != "兵器" || 自机[反射对象.武器类型名] == "话筒支架") {
            return false;
        }
        
        var 当前帧 = 自机.man._currentframe;
        if (当前帧 >= 370 && 当前帧 <= 413) {
            自机[反射对象.动画帧名] = Math.max(自机[反射对象.动画帧名], Math.floor(反射对象.动画时长 * 2 / 3));
        }
        
        return true;
    };
    
    if (判断是否展开()) {
        if (自机[反射对象.动画帧名] < 反射对象.动画时长) {
            自机[反射对象.动画帧名]++;
        }
    } else {
        if (自机[反射对象.动画帧名] > 1) {
            自机[反射对象.动画帧名]--;
        }
    }
    
    刀.动画.gotoAndStop(自机[反射对象.动画帧名]);
    
    // 动态调整刀口位置
    if (刀.刀口位置1) {
        if (自机[反射对象.武器类型名] == "光剑") {
            刀.刀口位置1._y = 164;
        } else {
            刀.刀口位置1._y = 363;
        }
    }
    
    if (刀.刀口位置3) {
        if (自机[反射对象.武器类型名] == "光剑") {
            刀.刀口位置3._y = 102;
        } else {
            刀.刀口位置3._y = 216;
        }
    }
};

_root.装备生命周期函数.主唱光刃释放周期 = function(反射对象, 参数对象)
{
    _root.装备生命周期函数.移除异常周期函数(反射对象);
    var 自机 = 反射对象.自机;
    var 刀 = 自机.刀_引用;
    
    // 初始化子弹属性
    if (!反射对象.光刃子弹属性) {
        反射对象.光刃子弹属性 = 反射对象.子弹配置.bullet_0;
    }
    
    var 主唱光刃耗蓝量 = Math.floor(自机.mp满血值 / 100 * 反射对象.耗蓝比例);
    var 主唱光刃时间戳名 = 自机.刀 + "主唱光刃时间戳";
    var 主唱光刃时间间隔 = 500;
    var 主唱光刃类型 = "主唱光刃突刺";
    
    // 判断是否为兵器跳
    var 是否兵器跳 = function() {
        if (自机._currentframe >= 599 && 自机._currentframe <= 618) {
            return true;
        }
        return false;
    };
    
    if (_root.兵器攻击检测(自机) && 自机.mp >= 主唱光刃耗蓝量) {
        if (自机[反射对象.武器类型名] == "光剑") {
            if (是否兵器跳()) {
                if (自机.man._currentframe == 4) {
                    主唱光刃时间间隔 = 300;
                    主唱光刃类型 = "主唱光刃上劈斩";
                } else {
                    主唱光刃时间间隔 = 1000;
                    主唱光刃类型 = "主唱光刃";  // 不触发
                }
            } else {
                // 根据攻击状态判断光刃类型
                switch (自机.getSmallState()) {
                    case "兵器一段前":
                        主唱光刃类型 = "主唱光刃上轮斩";
                        break;
                    case "兵器一段中":
                        主唱光刃类型 = "主唱光刃";  // 一段中无特效
                        break;
                    case "兵器二段中":
                        主唱光刃类型 = "主唱光刃下轮斩";
                        break;
                    case "兵器三段中":
                        主唱光刃类型 = "主唱光刃上挑斩";
                        break;
                    case "兵器四段中":
                        主唱光刃类型 = "主唱光刃下撩斩";
                        break;
                    case "兵器五段中":
                        主唱光刃类型 = "主唱光刃下圈斩";
                        break;
                    default:
                        主唱光刃类型 = "主唱光刃突刺";
                }
                
                // 保证每一刀都能触发且仅触发一次
                if (主唱光刃类型 != "主唱光刃突刺" && 自机.上次主唱光刃类型 != 主唱光刃类型) {
                    主唱光刃时间间隔 = 0;
                } else {
                    主唱光刃时间间隔 = 1200;
                }
                
                自机.上次主唱光刃类型 = 主唱光刃类型;
            }
            
            // 检查并执行光刃释放
            if (!自机[主唱光刃时间戳名] || getTimer() - 自机[主唱光刃时间戳名] > 主唱光刃时间间隔) {
                自机[主唱光刃时间戳名] = getTimer();
                
                var 刀口 = 刀.刀口位置3;
                var 坐标 = {x: 刀口._x, y: 刀口._y};
                刀口._parent.localToGlobal(坐标);
                _root.gameworld.globalToLocal(坐标);
                
                反射对象.光刃子弹属性.声音 = "";
                反射对象.光刃子弹属性.霰弹值 = 1;
                反射对象.光刃子弹属性.子弹散射度 = 0;
                反射对象.光刃子弹属性.发射效果 = "";
                反射对象.光刃子弹属性.子弹种类 = 主唱光刃类型;
                反射对象.光刃子弹属性.子弹威力 = 自机.空手攻击力 * 0.5 + 自机.话筒支架基础伤害 * 2;
                反射对象.光刃子弹属性.子弹速度 = 0;
                反射对象.光刃子弹属性.击中地图效果 = "";
                反射对象.光刃子弹属性.Z轴攻击范围 = 50;
                反射对象.光刃子弹属性.击倒率 = 10;
                反射对象.光刃子弹属性.击中后子弹的效果 = "";
                反射对象.光刃子弹属性.shootX = 坐标.x;
                反射对象.光刃子弹属性.shootY = 坐标.y;
                反射对象.光刃子弹属性.shootZ = 自机.Z轴坐标;
                
                _root.子弹区域shoot传递(反射对象.光刃子弹属性);
                
                if (主唱光刃类型 == "主唱光刃突刺") {
                    自机.mp -= 主唱光刃耗蓝量;
                }
            }
        }
    }
};

_root.装备生命周期函数.主唱红色音符周期 = function(反射对象, 参数对象)
{
    _root.装备生命周期函数.移除异常周期函数(反射对象);
    var 自机 = 反射对象.自机;
    
    // 初始化红色音符系统
    var 红色音符标识 = 自机.刀 + "红色音符";
    var 红色音符时间戳名 = 红色音符标识 + "时间戳";
    var 红色音符耗蓝量 = Math.floor(自机.mp满血值 / 100 * 反射对象.耗蓝比例);
    var 红色音符最大增幅次数 = 24;
    var 红色音符攻击力增幅百分比 = 2.5;
    
    // 获得随机时间间隔
    var 获得随机时间间隔 = function() {
        return _root.随机整数(0, 1000);
    };
    
    // 获得随机坐标偏离  
    var 获得随机坐标偏离 = function() {
        var xOffset = (_root.basic_random() - 0.5) * 2 * 反射对象.坐标偏移范围;
        var yOffset = (_root.basic_random() - 0.5) * 2 * 反射对象.坐标偏移范围;
        return {x: 自机._x + xOffset, y: 自机._y + yOffset};
    };
    
    if (_root.兵器攻击检测(自机) && 自机.mp >= 红色音符耗蓝量) {
        if (自机[反射对象.武器类型名] == "话筒支架") {
            var 红色音符时间间隔 = 获得随机时间间隔();
            
            if (!自机[红色音符时间戳名] || getTimer() - 自机[红色音符时间戳名] > 红色音符时间间隔) {
                自机[红色音符时间戳名] = getTimer();
                
                var myPoint = 获得随机坐标偏离();
                var 增幅名 = 红色音符标识 + "攻击增幅";
                
                if (自机["增幅次数"][增幅名] === undefined) {
                    自机["增幅次数"][增幅名] = 1;
                }
                
                if (自机["增幅次数"][增幅名] <= 红色音符最大增幅次数) {
                    自机.空手攻击力 *= (100 + 红色音符攻击力增幅百分比) / 100;
                    _root.发布消息("攻击力第" + 自机["增幅次数"][增幅名] + "次上升" + 红色音符攻击力增幅百分比 + "%！目前攻击力为" + Math.floor(自机.空手攻击力) + "点！");
                    自机["增幅次数"][增幅名] += 1;
                }
                
                // 在第12次和第24次增幅时召唤伙伴
                if (自机["增幅次数"][增幅名] == 12 || 自机["增幅次数"][增幅名] == 24) {
                    _root.装备生命周期函数.主唱召唤伙伴(反射对象, 自机["增幅次数"][增幅名]);
                }
                
                // 初始化音符子弹属性
                if (!反射对象.音符子弹属性) {
                    反射对象.音符子弹属性 = 反射对象.子弹配置.bullet_1;
                }
                
                反射对象.音符子弹属性.声音 = "";
                反射对象.音符子弹属性.霰弹值 = 1;
                反射对象.音符子弹属性.子弹散射度 = 360;
                反射对象.音符子弹属性.发射效果 = "";
                反射对象.音符子弹属性.子弹种类 = "红色音符";
                反射对象.音符子弹属性.子弹威力 = 红色音符耗蓝量 * 10;
                反射对象.音符子弹属性.子弹速度 = 3;
                反射对象.音符子弹属性.击中地图效果 = "";
                反射对象.音符子弹属性.Z轴攻击范围 = 20;
                反射对象.音符子弹属性.击倒率 = 100;
                反射对象.音符子弹属性.击中后子弹的效果 = "";
                反射对象.音符子弹属性.shootX = myPoint.x;
                反射对象.音符子弹属性.shootY = 自机._y;
                反射对象.音符子弹属性.shootZ = 自机.Z轴坐标;
                
                _root.子弹区域shoot传递(反射对象.音符子弹属性);
                自机.mp -= 红色音符耗蓝量;
            }
        }
    }
};

_root.装备生命周期函数.主唱猩红增幅周期 = function(反射对象, 参数对象)
{
    _root.装备生命周期函数.移除异常周期函数(反射对象);
    var 自机 = 反射对象.自机;
    
    var 猩红增幅标识 = 自机.刀 + "猩红增幅";
    var 猩红增幅时间戳名 = 猩红增幅标识 + "时间戳";
    var 猩红增幅时间间隔 = _root.随机整数(0, 1000) * 6;
    var 猩红增幅耗蓝量 = Math.floor(自机.mp满血值 / 100 * 反射对象.耗蓝比例 / 2);
    
    // 集体加血函数
    var 集体加血 = function(加血距离X, 加血距离Y) {
        var 是否加血成功 = false;
        for (var each in _root.gameworld) {
            var 目标 = _root.gameworld[each];
            if (目标.是否为敌人 == 自机.是否为敌人) {
                if (Math.abs(目标._x - 自机._x) < 加血距离X && Math.abs(目标._y - 自机._y) < 加血距离Y) {
                    if (目标.hp > 0 && 目标.hp < 目标.hp满血值) {
                        目标.hp += 猩红增幅耗蓝量 * 4 + Math.floor(目标.hp满血值 * 0.03);
                        if (目标.hp > 目标.hp满血值) {
                            目标.hp = 目标.hp满血值;
                        }
                        _root.效果("猩红增幅", 目标._x, 目标._y, 100, true);
                        是否加血成功 = true;
                    }
                }
            }
        }
        return 是否加血成功;
    };
    
    if (_root.兵器攻击检测(自机) && 自机.mp >= 猩红增幅耗蓝量) {
        if (!自机[猩红增幅时间戳名] || getTimer() - 自机[猩红增幅时间戳名] > 猩红增幅时间间隔) {
            自机[猩红增幅时间戳名] = getTimer();
            
            集体加血(900, 600);
            自机.mp -= 猩红增幅耗蓝量;
        }
    }
};

_root.装备生命周期函数.主唱召唤伙伴 = function(反射对象, 增幅次数)
{
    var 自机 = 反射对象.自机;
    
    var 扭蛋点 = _root.随机整数(1, 100);
    var 兵种, 名字;
    
    if (扭蛋点 <= 75) {
        兵种 = "敌人-僵尸1-狗";
        名字 = "主唱的狗";
    } else if (扭蛋点 <= 85) {
        兵种 = "敌人-辫子姑娘";
        名字 = "主唱的战斗少女";
    } else if (扭蛋点 <= 95) {
        兵种 = "敌人-狂野玫瑰马尾姑娘";
        名字 = "主唱的街舞少女";
    } else if (扭蛋点 <= 97) {
        兵种 = "敌人-精英战术少女";
        名字 = "主唱的精英少女";
    } else if (扭蛋点 <= 98) {
        兵种 = "敌人-双喷少女";
        名字 = "主唱的学姐";
    } else if (扭蛋点 <= 99) {
        兵种 = "敌人-摇滚公园少女";
        名字 = "主唱的少女键盘";
    } else {
        兵种 = "敌人-摇滚公园萝莉";
        名字 = "主唱的萝莉吉他";
    }
    
    var 等级 = 自机.等级;
    var 身高 = 自机.身高 + _root.随机整数(-30, -15);
    var 是否为敌人 = 自机.是否为敌人;
    var 僵尸型敌人newname = 增幅次数 + 兵种;
    
    _root.加载游戏世界人物(
        兵种, 
        僵尸型敌人newname, 
        _root.gameworld.getNextHighestDepth(), 
        {
            _x: 自机._x, 
            _y: 自机._y, 
            等级: 等级, 
            名字: 名字 + "[" + 扭蛋点 + "]", 
            是否为敌人: 是否为敌人, 
            身高: 身高
        }
    );
    
    _root.效果("升级动画2", 自机._x, 自机._y, 100);
    _root.发布消息("召唤主唱的伙伴[" + 名字 + "]！");
};
